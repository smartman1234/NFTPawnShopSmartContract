// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PushNotificationClient is the client API for PushNotification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushNotificationClient interface {
	SendNotification(ctx context.Context, in *NotificationData, opts ...grpc.CallOption) (*NotificationResult, error)
}

type pushNotificationClient struct {
	cc grpc.ClientConnInterface
}

func NewPushNotificationClient(cc grpc.ClientConnInterface) PushNotificationClient {
	return &pushNotificationClient{cc}
}

func (c *pushNotificationClient) SendNotification(ctx context.Context, in *NotificationData, opts ...grpc.CallOption) (*NotificationResult, error) {
	out := new(NotificationResult)
	err := c.cc.Invoke(ctx, "/app.PushNotification/SendNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushNotificationServer is the server API for PushNotification service.
// All implementations must embed UnimplementedPushNotificationServer
// for forward compatibility
type PushNotificationServer interface {
	SendNotification(context.Context, *NotificationData) (*NotificationResult, error)
	mustEmbedUnimplementedPushNotificationServer()
}

// UnimplementedPushNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedPushNotificationServer struct {
}

func (UnimplementedPushNotificationServer) SendNotification(context.Context, *NotificationData) (*NotificationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedPushNotificationServer) mustEmbedUnimplementedPushNotificationServer() {}

// UnsafePushNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushNotificationServer will
// result in compilation errors.
type UnsafePushNotificationServer interface {
	mustEmbedUnimplementedPushNotificationServer()
}

func RegisterPushNotificationServer(s grpc.ServiceRegistrar, srv PushNotificationServer) {
	s.RegisterService(&PushNotification_ServiceDesc, srv)
}

func _PushNotification_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushNotificationServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.PushNotification/SendNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushNotificationServer).SendNotification(ctx, req.(*NotificationData))
	}
	return interceptor(ctx, in, info, handler)
}

// PushNotification_ServiceDesc is the grpc.ServiceDesc for PushNotification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushNotification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.PushNotification",
	HandlerType: (*PushNotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _PushNotification_SendNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
