// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PawningShopPawn is an auto generated low-level Go binding around an user-defined struct.
type PawningShopPawn struct {
	Creator         common.Address
	ContractAddress common.Address
	TokenId         *big.Int
	Status          uint8
}

// ContractsMetaData contains all meta data concerning the Contracts contract.
var ContractsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"BidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pawner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"PawnCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pawner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"PawnCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pawner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PawnDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pawner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PawnLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pawner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PawnRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"WhiteListAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"WhiteListRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_bidToPawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInterestProRated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_pawnToBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_pawns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enumPawningShop.PawnStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalNumberOfBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalNumberOfPawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_whiteListNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rate\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInterestProRated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"loanStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"cancelPawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createPawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPawnById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enumPawningShop.PawnStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structPawningShop.Pawn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"repaid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000600355600060045534801561001a57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506135658061006a6000396000f3fe60806040526004361061011f5760003560e01c80638228c579116100a05780639703ef35116100645780639703ef35146103f5578063b2131f7d1461041e578063b53c370114610449578063c398f41f14610472578063d98dbf211461049d5761011f565b80638228c579146102f457806386271db4146103315780638bfaf6841461036e5780638da5cb5b146103ae5780638e47fe51146103d95761011f565b80633ce11def116100e75780633ce11def14610220578063415f12401461024957806347ee0394146102725780635f93893b1461029b5780636707927d146102b75761011f565b806301bf66481461012457806309a9d76c1461014d57806326d8600b146101785780632712b2e5146101b55780632b1fd58a146101f7575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190612131565b6104c8565b005b34801561015957600080fd5b5061016261066c565b60405161016f9190612820565b60405180910390f35b34801561018457600080fd5b5061019f600480360381019061019a91906121f8565b6106fa565b6040516101ac91906126d6565b60405180910390f35b3480156101c157600080fd5b506101dc60048036038101906101d791906121f8565b610739565b6040516101ee969594939291906127bf565b60405180910390f35b34801561020357600080fd5b5061021e600480360381019061021991906121f8565b6107a2565b005b34801561022c57600080fd5b50610247600480360381019061024291906121f8565b610a6e565b005b34801561025557600080fd5b50610270600480360381019061026b91906121f8565b610c75565b005b34801561027e57600080fd5b5061029960048036038101906102949190612131565b610eb8565b005b6102b560048036038101906102b091906121f8565b6110f0565b005b3480156102c357600080fd5b506102de60048036038101906102d991906121f8565b61144e565b6040516102eb9190612b02565b60405180910390f35b34801561030057600080fd5b5061031b600480360381019061031691906121f8565b61156c565b6040516103289190612b1d565b60405180910390f35b34801561033d57600080fd5b50610358600480360381019061035391906121f8565b611584565b6040516103659190612b1d565b60405180910390f35b34801561037a57600080fd5b50610395600480360381019061039091906121f8565b61159c565b6040516103a59493929190612751565b60405180910390f35b3480156103ba57600080fd5b506103c3611619565b6040516103d091906126d6565b60405180910390f35b6103f360048036038101906103ee9190612225565b61163d565b005b34801561040157600080fd5b5061041c600480360381019061041791906121f8565b6118d1565b005b34801561042a57600080fd5b50610433611b54565b6040516104409190612b1d565b60405180910390f35b34801561045557600080fd5b50610470600480360381019061046b919061218b565b611b5a565b005b34801561047e57600080fd5b50610487611fac565b6040516104949190612b1d565b60405180910390f35b3480156104a957600080fd5b506104b2611fb2565b6040516104bf9190612b1d565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90612aa2565b60405180910390fd5b60005b6001805490508110156105f0578173ffffffffffffffffffffffffffffffffffffffff166001828154811061059157610590612de7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156105dd576105f0565b80806105e890612d11565b915050610559565b6001818154811061060457610603612de7565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557fdb0d54f6e7ff4a52bdc49b4c8d9ff245f409fee25c2c0a0a72ece14e2ddf4cfc8260405161066091906126d6565b60405180910390a15050565b606060018054806020026020016040519081016040528092919081815260200182805480156106f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a6575b5050505050905090565b6001818154811061070a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b600060066000838152602001908152602001600020905060006007600084815260200190815260200160002054905060008111610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080b90612962565b60405180910390fd5b60006005600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b490612982565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163084600201546040518463ffffffff1660e01b81526004016109469392919061271a565b600060405180830381600087803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b5050505060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc85600101549081150290604051600060405180830381858888f193505050501580156109eb573d6000803e3d6000fd5b5060028260030160006101000a81548160ff02191690836004811115610a1457610a13612db8565b5b021790555084600860008581526020019081526020016000208190555060028260030160006101000a81548160ff02191690836004811115610a5957610a58612db8565b5b02179055504284600301819055505050505050565b600060056000838152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006004811115610ac257610ac1612db8565b5b8260030160009054906101000a900460ff166004811115610ae657610ae5612db8565b5b14610b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1d90612a42565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8b90612882565b60405180910390fd5b6000600860008581526020019081526020016000205414610bea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be1906129a2565b60405180910390fd5b60018260030160006101000a81548160ff02191690836004811115610c1257610c11612db8565b5b02179055507f6d2c0a066258c4b768dc98e6e9ce603e177a49c3b5ed4521b992fcddd16ccec460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684604051610c68929190612796565b60405180910390a1505050565b60006006600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1590612a22565b60405180910390fd5b80600101548160030154610d329190612b82565b4211610d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6a90612a82565b60405180910390fd5b60006007600084815260200190815260200160002054905082600860008381526020019081526020016000205414610de0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd790612922565b60405180910390fd5b60006005600083815260200190815260200160002090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600201546040518463ffffffff1660e01b8152600401610e809392919061271a565b600060405180830381600087803b158015610e9a57600080fd5b505af1158015610eae573d6000803e3d6000fd5b5050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3d90612a02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fad906128c2565b60405180910390fd5b60005b600180549050811015611051578173ffffffffffffffffffffffffffffffffffffffff1660018281548110610ff157610ff0612de7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561103e57506110ed565b808061104990612d11565b915050610fb9565b6001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d291826040516110e391906126d6565b60405180910390a1505b50565b60006005600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611199576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119090612ae2565b60405180910390fd5b60006008600084815260200190815260200160002054905060008114156111f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ec906129c2565b60405180910390fd5b6000600660008381526020019081526020016000209050806004015481600301546112209190612b82565b421115611262576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611259906128e2565b60405180910390fd5b600034905060008260030154426112799190612c63565b905060006112a7846001015485600201548660040154858860050160009054906101000a900460ff16611fb8565b90508083146112eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e290612942565b60405180910390fd5b8560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308860000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689600201546040518463ffffffff1660e01b81526004016113749392919061271a565b600060405180830381600087803b15801561138e57600080fd5b505af11580156113a2573d6000803e3d6000fd5b5050505060008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015611415573d6000803e3d6000fd5b50600860008981526020019081526020016000206000905560076000878152602001908152602001600020600090555050505050505050565b61145661204d565b600560008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff16600481111561154f5761154e612db8565b5b600481111561156157611560612db8565b5b815250509050919050565b60076020528060005260406000206000915090505481565b60086020528060005260406000206000915090505481565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16905084565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001600460008282546116509190612b82565b92505081905550600033905060003490506000600560008581526020019081526020016000209050600084116116bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b290612a62565b60405180910390fd5b600060048111156116cf576116ce612db8565b5b8160030160009054906101000a900460ff1660048111156116f3576116f2612db8565b5b14611733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172a906128a2565b60405180910390fd5b60008211611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176d90612ac2565b60405180910390fd5b8260066000600454815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600660006004548152602001908152602001600020600101819055508760ff166006600060045481526020019081526020016000206002018190555086600660006004548152602001908152602001600020600401819055508560066000600454815260200190815260200160002060050160006101000a81548160ff021916908315150217905550846006600060045481526020019081526020016000206003018190555083600760006004548152602001908152602001600020819055507fff2d32ce56b0b5d23a2d2e0fa74261ef152c762e716daa7e6eb1cc0fafa0a4e883856040516118bf929190612796565b60405180910390a15050505050505050565b6000600660008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16151515158152505090506000339050816000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fa90612862565b60405180910390fd5b6000600760008581526020019081526020016000205490508360086000838152602001908152602001600020541415611a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a68906129e2565b60405180910390fd5b6000836000015190508073ffffffffffffffffffffffffffffffffffffffff166108fc85602001519081150290604051600060405180830381858888f19350505050158015611ac4573d6000803e3d6000fd5b5060066000868152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905560048201600090556005820160006101000a81549060ff0219169055505060076000868152602001908152602001600020600090555050505050565b60025481565b600160036000828254611b6d9190612b82565b925050819055506000805b600180549050811015611c0f5760018181548110611b9957611b98612de7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bfc57600191505b8080611c0790612d11565b915050611b78565b5060003390506001151582151514611c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5390612902565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1663081812fc866040518263ffffffff1660e01b8152600401611cae9190612b1d565b60206040518083038186803b158015611cc657600080fd5b505afa158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe919061215e565b73ffffffffffffffffffffffffffffffffffffffff1614905060008573ffffffffffffffffffffffffffffffffffffffff1663e985e9c584306040518363ffffffff1660e01b8152600401611d549291906126f1565b60206040518083038186803b158015611d6c57600080fd5b505afa158015611d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da491906121cb565b90508180611daf5750805b611dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de590612842565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401611e2b9392919061271a565b600060405180830381600087803b158015611e4557600080fd5b505af1158015611e59573d6000803e3d6000fd5b505050508260056000600354815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560056000600354815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460056000600354815260200190815260200160002060020181905550600060056000600354815260200190815260200160002060030160006101000a81548160ff02191690836004811115611f6457611f63612db8565b5b02179055507fd10594784457563b8564c078bb5c8bcc5e6b8e1b08b2d7ef7af261e84e366c1f83600354604051611f9c929190612796565b60405180910390a1505050505050565b60045481565b60035481565b6000808590508215611fec57611fe984611fdb878961200b90919063ffffffff16565b61202190919063ffffffff16565b90505b611fff868861203790919063ffffffff16565b91505095945050505050565b600081836120199190612bd8565b905092915050565b6000818361202f9190612c09565b905092915050565b600081836120459190612b82565b905092915050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600060048111156120ad576120ac612db8565b5b81525090565b6000813590506120c2816134d3565b92915050565b6000815190506120d7816134d3565b92915050565b6000813590506120ec816134ea565b92915050565b600081519050612101816134ea565b92915050565b60008135905061211681613501565b92915050565b60008135905061212b81613518565b92915050565b60006020828403121561214757612146612e16565b5b6000612155848285016120b3565b91505092915050565b60006020828403121561217457612173612e16565b5b6000612182848285016120c8565b91505092915050565b600080604083850312156121a2576121a1612e16565b5b60006121b0858286016120b3565b92505060206121c185828601612107565b9150509250929050565b6000602082840312156121e1576121e0612e16565b5b60006121ef848285016120f2565b91505092915050565b60006020828403121561220e5761220d612e16565b5b600061221c84828501612107565b91505092915050565b600080600080600060a0868803121561224157612240612e16565b5b600061224f8882890161211c565b955050602061226088828901612107565b9450506040612271888289016120dd565b935050606061228288828901612107565b925050608061229388828901612107565b9150509295509295909350565b60006122ac83836122b8565b60208301905092915050565b6122c181612c97565b82525050565b6122d081612c97565b82525050565b60006122e182612b48565b6122eb8185612b60565b93506122f683612b38565b8060005b8381101561232757815161230e88826122a0565b975061231983612b53565b9250506001810190506122fa565b5085935050505092915050565b61233d81612ca9565b82525050565b61234c81612cff565b82525050565b61235b81612cff565b82525050565b600061236e602f83612b71565b915061237982612e1b565b604082019050919050565b6000612391602c83612b71565b915061239c82612e6a565b604082019050919050565b60006123b4603183612b71565b91506123bf82612eb9565b604082019050919050565b60006123d7602183612b71565b91506123e282612f08565b604082019050919050565b60006123fa603c83612b71565b915061240582612f57565b604082019050919050565b600061241d601e83612b71565b915061242882612fa6565b602082019050919050565b6000612440603083612b71565b915061244b82612fcf565b604082019050919050565b6000612463603183612b71565b915061246e8261301e565b604082019050919050565b6000612486602683612b71565b91506124918261306d565b604082019050919050565b60006124a9602483612b71565b91506124b4826130bc565b604082019050919050565b60006124cc603083612b71565b91506124d78261310b565b604082019050919050565b60006124ef603483612b71565b91506124fa8261315a565b604082019050919050565b6000612512603383612b71565b915061251d826131a9565b604082019050919050565b6000612535603083612b71565b9150612540826131f8565b604082019050919050565b6000612558603583612b71565b915061256382613247565b604082019050919050565b600061257b603483612b71565b915061258682613296565b604082019050919050565b600061259e603a83612b71565b91506125a9826132e5565b604082019050919050565b60006125c1602183612b71565b91506125cc82613334565b604082019050919050565b60006125e4602883612b71565b91506125ef82613383565b604082019050919050565b6000612607603a83612b71565b9150612612826133d2565b604082019050919050565b600061262a603283612b71565b915061263582613421565b604082019050919050565b600061264d602b83612b71565b915061265882613470565b604082019050919050565b60808201600082015161267960008501826122b8565b50602082015161268c60208501826122b8565b50604082015161269f60408501826126b8565b5060608201516126b26060850182612343565b50505050565b6126c181612ce8565b82525050565b6126d081612ce8565b82525050565b60006020820190506126eb60008301846122c7565b92915050565b600060408201905061270660008301856122c7565b61271360208301846122c7565b9392505050565b600060608201905061272f60008301866122c7565b61273c60208301856122c7565b61274960408301846126c7565b949350505050565b600060808201905061276660008301876122c7565b61277360208301866122c7565b61278060408301856126c7565b61278d6060830184612352565b95945050505050565b60006040820190506127ab60008301856122c7565b6127b860208301846126c7565b9392505050565b600060c0820190506127d460008301896122c7565b6127e160208301886126c7565b6127ee60408301876126c7565b6127fb60608301866126c7565b61280860808301856126c7565b61281560a0830184612334565b979650505050505050565b6000602082019050818103600083015261283a81846122d6565b905092915050565b6000602082019050818103600083015261285b81612361565b9050919050565b6000602082019050818103600083015261287b81612384565b9050919050565b6000602082019050818103600083015261289b816123a7565b9050919050565b600060208201905081810360008301526128bb816123ca565b9050919050565b600060208201905081810360008301526128db816123ed565b9050919050565b600060208201905081810360008301526128fb81612410565b9050919050565b6000602082019050818103600083015261291b81612433565b9050919050565b6000602082019050818103600083015261293b81612456565b9050919050565b6000602082019050818103600083015261295b81612479565b9050919050565b6000602082019050818103600083015261297b8161249c565b9050919050565b6000602082019050818103600083015261299b816124bf565b9050919050565b600060208201905081810360008301526129bb816124e2565b9050919050565b600060208201905081810360008301526129db81612505565b9050919050565b600060208201905081810360008301526129fb81612528565b9050919050565b60006020820190508181036000830152612a1b8161254b565b9050919050565b60006020820190508181036000830152612a3b8161256e565b9050919050565b60006020820190508181036000830152612a5b81612591565b9050919050565b60006020820190508181036000830152612a7b816125b4565b9050919050565b60006020820190508181036000830152612a9b816125d7565b9050919050565b60006020820190508181036000830152612abb816125fa565b9050919050565b60006020820190508181036000830152612adb8161261d565b9050919050565b60006020820190508181036000830152612afb81612640565b9050919050565b6000608082019050612b176000830184612663565b92915050565b6000602082019050612b3260008301846126c7565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612b8d82612ce8565b9150612b9883612ce8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612bcd57612bcc612d5a565b5b828201905092915050565b6000612be382612ce8565b9150612bee83612ce8565b925082612bfe57612bfd612d89565b5b828204905092915050565b6000612c1482612ce8565b9150612c1f83612ce8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c5857612c57612d5a565b5b828202905092915050565b6000612c6e82612ce8565b9150612c7983612ce8565b925082821015612c8c57612c8b612d5a565b5b828203905092915050565b6000612ca282612cc8565b9050919050565b60008115159050919050565b6000819050612cc3826134bf565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612d0a82612cb5565b9050919050565b6000612d1c82612ce8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d4f57612d4e612d5a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f5061776e696e6753686f703a20686176656e277420676f74207065726d69737360008201527f696f6e20746f207472616e736665720000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a206f6e6c792063726561746f722063616e20636160008201527f6e63656c20746865206269640000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c79206f776e6572206f6620746865207060008201527f61776e2063616e2063616e63656c206974000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a2063616e6e6f742062696420746869732070617760008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a20736d61727420636f6e7472616374206164647260008201527f657373206d75737420626520646966666572656e742077697468203000000000602082015250565b7f5061776e696e6753686f703a20746f206c61746520746f207265706169640000600082015250565b7f5061776e696e6753686f703a20736d61727420636f6e7472616374206973206e60008201527f6f7420696e207768697465206c69737400000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a207468697320626964206973206e6f742061636360008201527f657074656420627920626f72726f776572000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a207061792065786163746c79207265706169642060008201527f616d6f756e740000000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a20546865207061776e206973206e6f742065786960008201527f7374656400000000000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a206f6e6c792063726561746f72206f662070617760008201527f6e2063616e206163636570742062696400000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c792063616e2063616e63656c2077686560008201527f6e206e6f20626964206973206163636570746564000000000000000000000000602082015250565b7f5061776e696e6753686f703a2054686973207061776e20646f656e277420686160008201527f766520616e792061636365707465642062696400000000000000000000000000602082015250565b7f5061776e696e6753686f703a20796f757220626964206973206163636570746560008201527f642c2063616e6e6f742063616e63656c00000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c79206f776e65722063616e206164642060008201527f6164647265737320746f207768697465206c6973740000000000000000000000602082015250565b7f5061776e696e6753686f703a206f6e6c792063726561746f72206f662062696460008201527f2063616e206c697175696461746520746f6b656e000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c792063616e2063616e63656c2077686560008201527f6e2069742068617320737461747573206f662043524541544544000000000000602082015250565b7f5061776e696e6753686f703a207061776e206964206973206e6f742076616c6960008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204e6f742076616c69642074696d6520746f206c60008201527f6971756964617465000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c79206f776e65722063616e2072656d6f60008201527f766520616464726573732066726f6d207768697465206c697374000000000000602082015250565b7f5061776e696e6753686f703a20616d6f756e74206f66206d6f6e6579206d757360008201527f7420626520626967676572207468616e20300000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c792063726561746f72206f662070617760008201527f6e2063616e207265706179000000000000000000000000000000000000000000602082015250565b600581106134d0576134cf612db8565b5b50565b6134dc81612c97565b81146134e757600080fd5b50565b6134f381612ca9565b81146134fe57600080fd5b50565b61350a81612ce8565b811461351557600080fd5b50565b61352181612cf2565b811461352c57600080fd5b5056fea2646970667358221220994d449f7ddb840fe1e1bcb592b56cfd162b5f7cedd6fb5f388c98460bd97e3064736f6c63430008070033",
}

// ContractsABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractsMetaData.ABI instead.
var ContractsABI = ContractsMetaData.ABI

// ContractsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractsMetaData.Bin instead.
var ContractsBin = ContractsMetaData.Bin

// DeployContracts deploys a new Ethereum contract, binding an instance of Contracts to it.
func DeployContracts(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contracts, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// BidToPawn is a free data retrieval call binding the contract method 0x8228c579.
//
// Solidity: function _bidToPawn(uint256 ) view returns(uint256)
func (_Contracts *ContractsCaller) BidToPawn(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_bidToPawn", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BidToPawn is a free data retrieval call binding the contract method 0x8228c579.
//
// Solidity: function _bidToPawn(uint256 ) view returns(uint256)
func (_Contracts *ContractsSession) BidToPawn(arg0 *big.Int) (*big.Int, error) {
	return _Contracts.Contract.BidToPawn(&_Contracts.CallOpts, arg0)
}

// BidToPawn is a free data retrieval call binding the contract method 0x8228c579.
//
// Solidity: function _bidToPawn(uint256 ) view returns(uint256)
func (_Contracts *ContractsCallerSession) BidToPawn(arg0 *big.Int) (*big.Int, error) {
	return _Contracts.Contract.BidToPawn(&_Contracts.CallOpts, arg0)
}

// Bids is a free data retrieval call binding the contract method 0x2712b2e5.
//
// Solidity: function _bids(uint256 ) view returns(address creator, uint256 loanAmount, uint256 interest, uint256 loanStartTime, uint256 loanDuration, bool isInterestProRated)
func (_Contracts *ContractsCaller) Bids(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Creator            common.Address
	LoanAmount         *big.Int
	Interest           *big.Int
	LoanStartTime      *big.Int
	LoanDuration       *big.Int
	IsInterestProRated bool
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_bids", arg0)

	outstruct := new(struct {
		Creator            common.Address
		LoanAmount         *big.Int
		Interest           *big.Int
		LoanStartTime      *big.Int
		LoanDuration       *big.Int
		IsInterestProRated bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Creator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.LoanAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Interest = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.LoanStartTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.LoanDuration = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.IsInterestProRated = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// Bids is a free data retrieval call binding the contract method 0x2712b2e5.
//
// Solidity: function _bids(uint256 ) view returns(address creator, uint256 loanAmount, uint256 interest, uint256 loanStartTime, uint256 loanDuration, bool isInterestProRated)
func (_Contracts *ContractsSession) Bids(arg0 *big.Int) (struct {
	Creator            common.Address
	LoanAmount         *big.Int
	Interest           *big.Int
	LoanStartTime      *big.Int
	LoanDuration       *big.Int
	IsInterestProRated bool
}, error) {
	return _Contracts.Contract.Bids(&_Contracts.CallOpts, arg0)
}

// Bids is a free data retrieval call binding the contract method 0x2712b2e5.
//
// Solidity: function _bids(uint256 ) view returns(address creator, uint256 loanAmount, uint256 interest, uint256 loanStartTime, uint256 loanDuration, bool isInterestProRated)
func (_Contracts *ContractsCallerSession) Bids(arg0 *big.Int) (struct {
	Creator            common.Address
	LoanAmount         *big.Int
	Interest           *big.Int
	LoanStartTime      *big.Int
	LoanDuration       *big.Int
	IsInterestProRated bool
}, error) {
	return _Contracts.Contract.Bids(&_Contracts.CallOpts, arg0)
}

// FeeRate is a free data retrieval call binding the contract method 0xb2131f7d.
//
// Solidity: function _feeRate() view returns(uint256)
func (_Contracts *ContractsCaller) FeeRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_feeRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeRate is a free data retrieval call binding the contract method 0xb2131f7d.
//
// Solidity: function _feeRate() view returns(uint256)
func (_Contracts *ContractsSession) FeeRate() (*big.Int, error) {
	return _Contracts.Contract.FeeRate(&_Contracts.CallOpts)
}

// FeeRate is a free data retrieval call binding the contract method 0xb2131f7d.
//
// Solidity: function _feeRate() view returns(uint256)
func (_Contracts *ContractsCallerSession) FeeRate() (*big.Int, error) {
	return _Contracts.Contract.FeeRate(&_Contracts.CallOpts)
}

// PawnToBid is a free data retrieval call binding the contract method 0x86271db4.
//
// Solidity: function _pawnToBid(uint256 ) view returns(uint256)
func (_Contracts *ContractsCaller) PawnToBid(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_pawnToBid", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PawnToBid is a free data retrieval call binding the contract method 0x86271db4.
//
// Solidity: function _pawnToBid(uint256 ) view returns(uint256)
func (_Contracts *ContractsSession) PawnToBid(arg0 *big.Int) (*big.Int, error) {
	return _Contracts.Contract.PawnToBid(&_Contracts.CallOpts, arg0)
}

// PawnToBid is a free data retrieval call binding the contract method 0x86271db4.
//
// Solidity: function _pawnToBid(uint256 ) view returns(uint256)
func (_Contracts *ContractsCallerSession) PawnToBid(arg0 *big.Int) (*big.Int, error) {
	return _Contracts.Contract.PawnToBid(&_Contracts.CallOpts, arg0)
}

// Pawns is a free data retrieval call binding the contract method 0x8bfaf684.
//
// Solidity: function _pawns(uint256 ) view returns(address creator, address contractAddress, uint256 tokenId, uint8 status)
func (_Contracts *ContractsCaller) Pawns(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Creator         common.Address
	ContractAddress common.Address
	TokenId         *big.Int
	Status          uint8
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_pawns", arg0)

	outstruct := new(struct {
		Creator         common.Address
		ContractAddress common.Address
		TokenId         *big.Int
		Status          uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Creator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.ContractAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.TokenId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// Pawns is a free data retrieval call binding the contract method 0x8bfaf684.
//
// Solidity: function _pawns(uint256 ) view returns(address creator, address contractAddress, uint256 tokenId, uint8 status)
func (_Contracts *ContractsSession) Pawns(arg0 *big.Int) (struct {
	Creator         common.Address
	ContractAddress common.Address
	TokenId         *big.Int
	Status          uint8
}, error) {
	return _Contracts.Contract.Pawns(&_Contracts.CallOpts, arg0)
}

// Pawns is a free data retrieval call binding the contract method 0x8bfaf684.
//
// Solidity: function _pawns(uint256 ) view returns(address creator, address contractAddress, uint256 tokenId, uint8 status)
func (_Contracts *ContractsCallerSession) Pawns(arg0 *big.Int) (struct {
	Creator         common.Address
	ContractAddress common.Address
	TokenId         *big.Int
	Status          uint8
}, error) {
	return _Contracts.Contract.Pawns(&_Contracts.CallOpts, arg0)
}

// TotalNumberOfBid is a free data retrieval call binding the contract method 0xc398f41f.
//
// Solidity: function _totalNumberOfBid() view returns(uint256)
func (_Contracts *ContractsCaller) TotalNumberOfBid(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_totalNumberOfBid")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalNumberOfBid is a free data retrieval call binding the contract method 0xc398f41f.
//
// Solidity: function _totalNumberOfBid() view returns(uint256)
func (_Contracts *ContractsSession) TotalNumberOfBid() (*big.Int, error) {
	return _Contracts.Contract.TotalNumberOfBid(&_Contracts.CallOpts)
}

// TotalNumberOfBid is a free data retrieval call binding the contract method 0xc398f41f.
//
// Solidity: function _totalNumberOfBid() view returns(uint256)
func (_Contracts *ContractsCallerSession) TotalNumberOfBid() (*big.Int, error) {
	return _Contracts.Contract.TotalNumberOfBid(&_Contracts.CallOpts)
}

// TotalNumberOfPawn is a free data retrieval call binding the contract method 0xd98dbf21.
//
// Solidity: function _totalNumberOfPawn() view returns(uint256)
func (_Contracts *ContractsCaller) TotalNumberOfPawn(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_totalNumberOfPawn")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalNumberOfPawn is a free data retrieval call binding the contract method 0xd98dbf21.
//
// Solidity: function _totalNumberOfPawn() view returns(uint256)
func (_Contracts *ContractsSession) TotalNumberOfPawn() (*big.Int, error) {
	return _Contracts.Contract.TotalNumberOfPawn(&_Contracts.CallOpts)
}

// TotalNumberOfPawn is a free data retrieval call binding the contract method 0xd98dbf21.
//
// Solidity: function _totalNumberOfPawn() view returns(uint256)
func (_Contracts *ContractsCallerSession) TotalNumberOfPawn() (*big.Int, error) {
	return _Contracts.Contract.TotalNumberOfPawn(&_Contracts.CallOpts)
}

// WhiteListNFT is a free data retrieval call binding the contract method 0x26d8600b.
//
// Solidity: function _whiteListNFT(uint256 ) view returns(address)
func (_Contracts *ContractsCaller) WhiteListNFT(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_whiteListNFT", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WhiteListNFT is a free data retrieval call binding the contract method 0x26d8600b.
//
// Solidity: function _whiteListNFT(uint256 ) view returns(address)
func (_Contracts *ContractsSession) WhiteListNFT(arg0 *big.Int) (common.Address, error) {
	return _Contracts.Contract.WhiteListNFT(&_Contracts.CallOpts, arg0)
}

// WhiteListNFT is a free data retrieval call binding the contract method 0x26d8600b.
//
// Solidity: function _whiteListNFT(uint256 ) view returns(address)
func (_Contracts *ContractsCallerSession) WhiteListNFT(arg0 *big.Int) (common.Address, error) {
	return _Contracts.Contract.WhiteListNFT(&_Contracts.CallOpts, arg0)
}

// GetPawnById is a free data retrieval call binding the contract method 0x6707927d.
//
// Solidity: function getPawnById(uint256 id) view returns((address,address,uint256,uint8))
func (_Contracts *ContractsCaller) GetPawnById(opts *bind.CallOpts, id *big.Int) (PawningShopPawn, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getPawnById", id)

	if err != nil {
		return *new(PawningShopPawn), err
	}

	out0 := *abi.ConvertType(out[0], new(PawningShopPawn)).(*PawningShopPawn)

	return out0, err

}

// GetPawnById is a free data retrieval call binding the contract method 0x6707927d.
//
// Solidity: function getPawnById(uint256 id) view returns((address,address,uint256,uint8))
func (_Contracts *ContractsSession) GetPawnById(id *big.Int) (PawningShopPawn, error) {
	return _Contracts.Contract.GetPawnById(&_Contracts.CallOpts, id)
}

// GetPawnById is a free data retrieval call binding the contract method 0x6707927d.
//
// Solidity: function getPawnById(uint256 id) view returns((address,address,uint256,uint8))
func (_Contracts *ContractsCallerSession) GetPawnById(id *big.Int) (PawningShopPawn, error) {
	return _Contracts.Contract.GetPawnById(&_Contracts.CallOpts, id)
}

// GetWhiteList is a free data retrieval call binding the contract method 0x09a9d76c.
//
// Solidity: function getWhiteList() view returns(address[])
func (_Contracts *ContractsCaller) GetWhiteList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getWhiteList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetWhiteList is a free data retrieval call binding the contract method 0x09a9d76c.
//
// Solidity: function getWhiteList() view returns(address[])
func (_Contracts *ContractsSession) GetWhiteList() ([]common.Address, error) {
	return _Contracts.Contract.GetWhiteList(&_Contracts.CallOpts)
}

// GetWhiteList is a free data retrieval call binding the contract method 0x09a9d76c.
//
// Solidity: function getWhiteList() view returns(address[])
func (_Contracts *ContractsCallerSession) GetWhiteList() ([]common.Address, error) {
	return _Contracts.Contract.GetWhiteList(&_Contracts.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contracts *ContractsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contracts *ContractsSession) Owner() (common.Address, error) {
	return _Contracts.Contract.Owner(&_Contracts.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contracts *ContractsCallerSession) Owner() (common.Address, error) {
	return _Contracts.Contract.Owner(&_Contracts.CallOpts)
}

// AcceptBid is a paid mutator transaction binding the contract method 0x2b1fd58a.
//
// Solidity: function acceptBid(uint256 bidId) returns()
func (_Contracts *ContractsTransactor) AcceptBid(opts *bind.TransactOpts, bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "acceptBid", bidId)
}

// AcceptBid is a paid mutator transaction binding the contract method 0x2b1fd58a.
//
// Solidity: function acceptBid(uint256 bidId) returns()
func (_Contracts *ContractsSession) AcceptBid(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AcceptBid(&_Contracts.TransactOpts, bidId)
}

// AcceptBid is a paid mutator transaction binding the contract method 0x2b1fd58a.
//
// Solidity: function acceptBid(uint256 bidId) returns()
func (_Contracts *ContractsTransactorSession) AcceptBid(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AcceptBid(&_Contracts.TransactOpts, bidId)
}

// AddToWhiteList is a paid mutator transaction binding the contract method 0x47ee0394.
//
// Solidity: function addToWhiteList(address smartContract) returns()
func (_Contracts *ContractsTransactor) AddToWhiteList(opts *bind.TransactOpts, smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "addToWhiteList", smartContract)
}

// AddToWhiteList is a paid mutator transaction binding the contract method 0x47ee0394.
//
// Solidity: function addToWhiteList(address smartContract) returns()
func (_Contracts *ContractsSession) AddToWhiteList(smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.AddToWhiteList(&_Contracts.TransactOpts, smartContract)
}

// AddToWhiteList is a paid mutator transaction binding the contract method 0x47ee0394.
//
// Solidity: function addToWhiteList(address smartContract) returns()
func (_Contracts *ContractsTransactorSession) AddToWhiteList(smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.AddToWhiteList(&_Contracts.TransactOpts, smartContract)
}

// Bid is a paid mutator transaction binding the contract method 0x8e47fe51.
//
// Solidity: function bid(uint8 rate, uint256 duration, bool isInterestProRated, uint256 loanStartTime, uint256 pawnId) payable returns()
func (_Contracts *ContractsTransactor) Bid(opts *bind.TransactOpts, rate uint8, duration *big.Int, isInterestProRated bool, loanStartTime *big.Int, pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "bid", rate, duration, isInterestProRated, loanStartTime, pawnId)
}

// Bid is a paid mutator transaction binding the contract method 0x8e47fe51.
//
// Solidity: function bid(uint8 rate, uint256 duration, bool isInterestProRated, uint256 loanStartTime, uint256 pawnId) payable returns()
func (_Contracts *ContractsSession) Bid(rate uint8, duration *big.Int, isInterestProRated bool, loanStartTime *big.Int, pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Bid(&_Contracts.TransactOpts, rate, duration, isInterestProRated, loanStartTime, pawnId)
}

// Bid is a paid mutator transaction binding the contract method 0x8e47fe51.
//
// Solidity: function bid(uint8 rate, uint256 duration, bool isInterestProRated, uint256 loanStartTime, uint256 pawnId) payable returns()
func (_Contracts *ContractsTransactorSession) Bid(rate uint8, duration *big.Int, isInterestProRated bool, loanStartTime *big.Int, pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Bid(&_Contracts.TransactOpts, rate, duration, isInterestProRated, loanStartTime, pawnId)
}

// CancelBid is a paid mutator transaction binding the contract method 0x9703ef35.
//
// Solidity: function cancelBid(uint256 bidId) returns()
func (_Contracts *ContractsTransactor) CancelBid(opts *bind.TransactOpts, bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "cancelBid", bidId)
}

// CancelBid is a paid mutator transaction binding the contract method 0x9703ef35.
//
// Solidity: function cancelBid(uint256 bidId) returns()
func (_Contracts *ContractsSession) CancelBid(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CancelBid(&_Contracts.TransactOpts, bidId)
}

// CancelBid is a paid mutator transaction binding the contract method 0x9703ef35.
//
// Solidity: function cancelBid(uint256 bidId) returns()
func (_Contracts *ContractsTransactorSession) CancelBid(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CancelBid(&_Contracts.TransactOpts, bidId)
}

// CancelPawn is a paid mutator transaction binding the contract method 0x3ce11def.
//
// Solidity: function cancelPawn(uint256 pawnId) returns()
func (_Contracts *ContractsTransactor) CancelPawn(opts *bind.TransactOpts, pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "cancelPawn", pawnId)
}

// CancelPawn is a paid mutator transaction binding the contract method 0x3ce11def.
//
// Solidity: function cancelPawn(uint256 pawnId) returns()
func (_Contracts *ContractsSession) CancelPawn(pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CancelPawn(&_Contracts.TransactOpts, pawnId)
}

// CancelPawn is a paid mutator transaction binding the contract method 0x3ce11def.
//
// Solidity: function cancelPawn(uint256 pawnId) returns()
func (_Contracts *ContractsTransactorSession) CancelPawn(pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CancelPawn(&_Contracts.TransactOpts, pawnId)
}

// CreatePawn is a paid mutator transaction binding the contract method 0xb53c3701.
//
// Solidity: function createPawn(address tokenAddress, uint256 tokenId) returns()
func (_Contracts *ContractsTransactor) CreatePawn(opts *bind.TransactOpts, tokenAddress common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "createPawn", tokenAddress, tokenId)
}

// CreatePawn is a paid mutator transaction binding the contract method 0xb53c3701.
//
// Solidity: function createPawn(address tokenAddress, uint256 tokenId) returns()
func (_Contracts *ContractsSession) CreatePawn(tokenAddress common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CreatePawn(&_Contracts.TransactOpts, tokenAddress, tokenId)
}

// CreatePawn is a paid mutator transaction binding the contract method 0xb53c3701.
//
// Solidity: function createPawn(address tokenAddress, uint256 tokenId) returns()
func (_Contracts *ContractsTransactorSession) CreatePawn(tokenAddress common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CreatePawn(&_Contracts.TransactOpts, tokenAddress, tokenId)
}

// Liquidate is a paid mutator transaction binding the contract method 0x415f1240.
//
// Solidity: function liquidate(uint256 bidId) returns()
func (_Contracts *ContractsTransactor) Liquidate(opts *bind.TransactOpts, bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "liquidate", bidId)
}

// Liquidate is a paid mutator transaction binding the contract method 0x415f1240.
//
// Solidity: function liquidate(uint256 bidId) returns()
func (_Contracts *ContractsSession) Liquidate(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Liquidate(&_Contracts.TransactOpts, bidId)
}

// Liquidate is a paid mutator transaction binding the contract method 0x415f1240.
//
// Solidity: function liquidate(uint256 bidId) returns()
func (_Contracts *ContractsTransactorSession) Liquidate(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Liquidate(&_Contracts.TransactOpts, bidId)
}

// RemoveFromWhiteList is a paid mutator transaction binding the contract method 0x01bf6648.
//
// Solidity: function removeFromWhiteList(address smartContract) returns()
func (_Contracts *ContractsTransactor) RemoveFromWhiteList(opts *bind.TransactOpts, smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "removeFromWhiteList", smartContract)
}

// RemoveFromWhiteList is a paid mutator transaction binding the contract method 0x01bf6648.
//
// Solidity: function removeFromWhiteList(address smartContract) returns()
func (_Contracts *ContractsSession) RemoveFromWhiteList(smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.RemoveFromWhiteList(&_Contracts.TransactOpts, smartContract)
}

// RemoveFromWhiteList is a paid mutator transaction binding the contract method 0x01bf6648.
//
// Solidity: function removeFromWhiteList(address smartContract) returns()
func (_Contracts *ContractsTransactorSession) RemoveFromWhiteList(smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.RemoveFromWhiteList(&_Contracts.TransactOpts, smartContract)
}

// Repaid is a paid mutator transaction binding the contract method 0x5f93893b.
//
// Solidity: function repaid(uint256 pawnId) payable returns()
func (_Contracts *ContractsTransactor) Repaid(opts *bind.TransactOpts, pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "repaid", pawnId)
}

// Repaid is a paid mutator transaction binding the contract method 0x5f93893b.
//
// Solidity: function repaid(uint256 pawnId) payable returns()
func (_Contracts *ContractsSession) Repaid(pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Repaid(&_Contracts.TransactOpts, pawnId)
}

// Repaid is a paid mutator transaction binding the contract method 0x5f93893b.
//
// Solidity: function repaid(uint256 pawnId) payable returns()
func (_Contracts *ContractsTransactorSession) Repaid(pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Repaid(&_Contracts.TransactOpts, pawnId)
}

// ContractsBidCancelledIterator is returned from FilterBidCancelled and is used to iterate over the raw logs and unpacked data for BidCancelled events raised by the Contracts contract.
type ContractsBidCancelledIterator struct {
	Event *ContractsBidCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsBidCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsBidCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsBidCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsBidCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsBidCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsBidCancelled represents a BidCancelled event raised by the Contracts contract.
type ContractsBidCancelled struct {
	Creator common.Address
	PawnId  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBidCancelled is a free log retrieval operation binding the contract event 0x8d38c62ee74cd9e3dbcc09feaa7d1f5568aeaa35cbf8a0f167f513c07e2fd0b8.
//
// Solidity: event BidCancelled(address creator, uint256 pawnId)
func (_Contracts *ContractsFilterer) FilterBidCancelled(opts *bind.FilterOpts) (*ContractsBidCancelledIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "BidCancelled")
	if err != nil {
		return nil, err
	}
	return &ContractsBidCancelledIterator{contract: _Contracts.contract, event: "BidCancelled", logs: logs, sub: sub}, nil
}

// WatchBidCancelled is a free log subscription operation binding the contract event 0x8d38c62ee74cd9e3dbcc09feaa7d1f5568aeaa35cbf8a0f167f513c07e2fd0b8.
//
// Solidity: event BidCancelled(address creator, uint256 pawnId)
func (_Contracts *ContractsFilterer) WatchBidCancelled(opts *bind.WatchOpts, sink chan<- *ContractsBidCancelled) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "BidCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsBidCancelled)
				if err := _Contracts.contract.UnpackLog(event, "BidCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidCancelled is a log parse operation binding the contract event 0x8d38c62ee74cd9e3dbcc09feaa7d1f5568aeaa35cbf8a0f167f513c07e2fd0b8.
//
// Solidity: event BidCancelled(address creator, uint256 pawnId)
func (_Contracts *ContractsFilterer) ParseBidCancelled(log types.Log) (*ContractsBidCancelled, error) {
	event := new(ContractsBidCancelled)
	if err := _Contracts.contract.UnpackLog(event, "BidCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsBidCreatedIterator is returned from FilterBidCreated and is used to iterate over the raw logs and unpacked data for BidCreated events raised by the Contracts contract.
type ContractsBidCreatedIterator struct {
	Event *ContractsBidCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsBidCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsBidCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsBidCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsBidCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsBidCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsBidCreated represents a BidCreated event raised by the Contracts contract.
type ContractsBidCreated struct {
	Creator common.Address
	PawnId  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBidCreated is a free log retrieval operation binding the contract event 0xff2d32ce56b0b5d23a2d2e0fa74261ef152c762e716daa7e6eb1cc0fafa0a4e8.
//
// Solidity: event BidCreated(address creator, uint256 pawnId)
func (_Contracts *ContractsFilterer) FilterBidCreated(opts *bind.FilterOpts) (*ContractsBidCreatedIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "BidCreated")
	if err != nil {
		return nil, err
	}
	return &ContractsBidCreatedIterator{contract: _Contracts.contract, event: "BidCreated", logs: logs, sub: sub}, nil
}

// WatchBidCreated is a free log subscription operation binding the contract event 0xff2d32ce56b0b5d23a2d2e0fa74261ef152c762e716daa7e6eb1cc0fafa0a4e8.
//
// Solidity: event BidCreated(address creator, uint256 pawnId)
func (_Contracts *ContractsFilterer) WatchBidCreated(opts *bind.WatchOpts, sink chan<- *ContractsBidCreated) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "BidCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsBidCreated)
				if err := _Contracts.contract.UnpackLog(event, "BidCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidCreated is a log parse operation binding the contract event 0xff2d32ce56b0b5d23a2d2e0fa74261ef152c762e716daa7e6eb1cc0fafa0a4e8.
//
// Solidity: event BidCreated(address creator, uint256 pawnId)
func (_Contracts *ContractsFilterer) ParseBidCreated(log types.Log) (*ContractsBidCreated, error) {
	event := new(ContractsBidCreated)
	if err := _Contracts.contract.UnpackLog(event, "BidCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPawnCancelledIterator is returned from FilterPawnCancelled and is used to iterate over the raw logs and unpacked data for PawnCancelled events raised by the Contracts contract.
type ContractsPawnCancelledIterator struct {
	Event *ContractsPawnCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPawnCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPawnCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPawnCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPawnCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPawnCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPawnCancelled represents a PawnCancelled event raised by the Contracts contract.
type ContractsPawnCancelled struct {
	Pawner common.Address
	PawnId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPawnCancelled is a free log retrieval operation binding the contract event 0x6d2c0a066258c4b768dc98e6e9ce603e177a49c3b5ed4521b992fcddd16ccec4.
//
// Solidity: event PawnCancelled(address pawner, uint256 pawnId)
func (_Contracts *ContractsFilterer) FilterPawnCancelled(opts *bind.FilterOpts) (*ContractsPawnCancelledIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PawnCancelled")
	if err != nil {
		return nil, err
	}
	return &ContractsPawnCancelledIterator{contract: _Contracts.contract, event: "PawnCancelled", logs: logs, sub: sub}, nil
}

// WatchPawnCancelled is a free log subscription operation binding the contract event 0x6d2c0a066258c4b768dc98e6e9ce603e177a49c3b5ed4521b992fcddd16ccec4.
//
// Solidity: event PawnCancelled(address pawner, uint256 pawnId)
func (_Contracts *ContractsFilterer) WatchPawnCancelled(opts *bind.WatchOpts, sink chan<- *ContractsPawnCancelled) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PawnCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPawnCancelled)
				if err := _Contracts.contract.UnpackLog(event, "PawnCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePawnCancelled is a log parse operation binding the contract event 0x6d2c0a066258c4b768dc98e6e9ce603e177a49c3b5ed4521b992fcddd16ccec4.
//
// Solidity: event PawnCancelled(address pawner, uint256 pawnId)
func (_Contracts *ContractsFilterer) ParsePawnCancelled(log types.Log) (*ContractsPawnCancelled, error) {
	event := new(ContractsPawnCancelled)
	if err := _Contracts.contract.UnpackLog(event, "PawnCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPawnCreatedIterator is returned from FilterPawnCreated and is used to iterate over the raw logs and unpacked data for PawnCreated events raised by the Contracts contract.
type ContractsPawnCreatedIterator struct {
	Event *ContractsPawnCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPawnCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPawnCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPawnCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPawnCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPawnCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPawnCreated represents a PawnCreated event raised by the Contracts contract.
type ContractsPawnCreated struct {
	Pawner common.Address
	PawnId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPawnCreated is a free log retrieval operation binding the contract event 0xd10594784457563b8564c078bb5c8bcc5e6b8e1b08b2d7ef7af261e84e366c1f.
//
// Solidity: event PawnCreated(address pawner, uint256 pawnId)
func (_Contracts *ContractsFilterer) FilterPawnCreated(opts *bind.FilterOpts) (*ContractsPawnCreatedIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PawnCreated")
	if err != nil {
		return nil, err
	}
	return &ContractsPawnCreatedIterator{contract: _Contracts.contract, event: "PawnCreated", logs: logs, sub: sub}, nil
}

// WatchPawnCreated is a free log subscription operation binding the contract event 0xd10594784457563b8564c078bb5c8bcc5e6b8e1b08b2d7ef7af261e84e366c1f.
//
// Solidity: event PawnCreated(address pawner, uint256 pawnId)
func (_Contracts *ContractsFilterer) WatchPawnCreated(opts *bind.WatchOpts, sink chan<- *ContractsPawnCreated) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PawnCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPawnCreated)
				if err := _Contracts.contract.UnpackLog(event, "PawnCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePawnCreated is a log parse operation binding the contract event 0xd10594784457563b8564c078bb5c8bcc5e6b8e1b08b2d7ef7af261e84e366c1f.
//
// Solidity: event PawnCreated(address pawner, uint256 pawnId)
func (_Contracts *ContractsFilterer) ParsePawnCreated(log types.Log) (*ContractsPawnCreated, error) {
	event := new(ContractsPawnCreated)
	if err := _Contracts.contract.UnpackLog(event, "PawnCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPawnDealIterator is returned from FilterPawnDeal and is used to iterate over the raw logs and unpacked data for PawnDeal events raised by the Contracts contract.
type ContractsPawnDealIterator struct {
	Event *ContractsPawnDeal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPawnDealIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPawnDeal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPawnDeal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPawnDealIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPawnDealIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPawnDeal represents a PawnDeal event raised by the Contracts contract.
type ContractsPawnDeal struct {
	Pawner common.Address
	Lender common.Address
	Id     *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPawnDeal is a free log retrieval operation binding the contract event 0x50b9b032658f7f2483ce1ab617715ebaf1b4dea7cedcaef6ae24203f008f8788.
//
// Solidity: event PawnDeal(address pawner, address lender, uint256 id)
func (_Contracts *ContractsFilterer) FilterPawnDeal(opts *bind.FilterOpts) (*ContractsPawnDealIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PawnDeal")
	if err != nil {
		return nil, err
	}
	return &ContractsPawnDealIterator{contract: _Contracts.contract, event: "PawnDeal", logs: logs, sub: sub}, nil
}

// WatchPawnDeal is a free log subscription operation binding the contract event 0x50b9b032658f7f2483ce1ab617715ebaf1b4dea7cedcaef6ae24203f008f8788.
//
// Solidity: event PawnDeal(address pawner, address lender, uint256 id)
func (_Contracts *ContractsFilterer) WatchPawnDeal(opts *bind.WatchOpts, sink chan<- *ContractsPawnDeal) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PawnDeal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPawnDeal)
				if err := _Contracts.contract.UnpackLog(event, "PawnDeal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePawnDeal is a log parse operation binding the contract event 0x50b9b032658f7f2483ce1ab617715ebaf1b4dea7cedcaef6ae24203f008f8788.
//
// Solidity: event PawnDeal(address pawner, address lender, uint256 id)
func (_Contracts *ContractsFilterer) ParsePawnDeal(log types.Log) (*ContractsPawnDeal, error) {
	event := new(ContractsPawnDeal)
	if err := _Contracts.contract.UnpackLog(event, "PawnDeal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPawnLiquidatedIterator is returned from FilterPawnLiquidated and is used to iterate over the raw logs and unpacked data for PawnLiquidated events raised by the Contracts contract.
type ContractsPawnLiquidatedIterator struct {
	Event *ContractsPawnLiquidated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPawnLiquidatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPawnLiquidated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPawnLiquidated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPawnLiquidatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPawnLiquidatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPawnLiquidated represents a PawnLiquidated event raised by the Contracts contract.
type ContractsPawnLiquidated struct {
	Pawner common.Address
	Lender common.Address
	Id     *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPawnLiquidated is a free log retrieval operation binding the contract event 0x3f04bdfbb29083e787b72e4ad2d2b43ea0d6a571e532274d9a560234498315cc.
//
// Solidity: event PawnLiquidated(address pawner, address lender, uint256 id)
func (_Contracts *ContractsFilterer) FilterPawnLiquidated(opts *bind.FilterOpts) (*ContractsPawnLiquidatedIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PawnLiquidated")
	if err != nil {
		return nil, err
	}
	return &ContractsPawnLiquidatedIterator{contract: _Contracts.contract, event: "PawnLiquidated", logs: logs, sub: sub}, nil
}

// WatchPawnLiquidated is a free log subscription operation binding the contract event 0x3f04bdfbb29083e787b72e4ad2d2b43ea0d6a571e532274d9a560234498315cc.
//
// Solidity: event PawnLiquidated(address pawner, address lender, uint256 id)
func (_Contracts *ContractsFilterer) WatchPawnLiquidated(opts *bind.WatchOpts, sink chan<- *ContractsPawnLiquidated) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PawnLiquidated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPawnLiquidated)
				if err := _Contracts.contract.UnpackLog(event, "PawnLiquidated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePawnLiquidated is a log parse operation binding the contract event 0x3f04bdfbb29083e787b72e4ad2d2b43ea0d6a571e532274d9a560234498315cc.
//
// Solidity: event PawnLiquidated(address pawner, address lender, uint256 id)
func (_Contracts *ContractsFilterer) ParsePawnLiquidated(log types.Log) (*ContractsPawnLiquidated, error) {
	event := new(ContractsPawnLiquidated)
	if err := _Contracts.contract.UnpackLog(event, "PawnLiquidated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPawnRepaidIterator is returned from FilterPawnRepaid and is used to iterate over the raw logs and unpacked data for PawnRepaid events raised by the Contracts contract.
type ContractsPawnRepaidIterator struct {
	Event *ContractsPawnRepaid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPawnRepaidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPawnRepaid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPawnRepaid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPawnRepaidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPawnRepaidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPawnRepaid represents a PawnRepaid event raised by the Contracts contract.
type ContractsPawnRepaid struct {
	Pawner common.Address
	Lender common.Address
	Id     *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPawnRepaid is a free log retrieval operation binding the contract event 0x387b6c44a03a44af16fb6452ab8551059597dfe9a7287d1850fcfa5a81595c3d.
//
// Solidity: event PawnRepaid(address pawner, address lender, uint256 id)
func (_Contracts *ContractsFilterer) FilterPawnRepaid(opts *bind.FilterOpts) (*ContractsPawnRepaidIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PawnRepaid")
	if err != nil {
		return nil, err
	}
	return &ContractsPawnRepaidIterator{contract: _Contracts.contract, event: "PawnRepaid", logs: logs, sub: sub}, nil
}

// WatchPawnRepaid is a free log subscription operation binding the contract event 0x387b6c44a03a44af16fb6452ab8551059597dfe9a7287d1850fcfa5a81595c3d.
//
// Solidity: event PawnRepaid(address pawner, address lender, uint256 id)
func (_Contracts *ContractsFilterer) WatchPawnRepaid(opts *bind.WatchOpts, sink chan<- *ContractsPawnRepaid) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PawnRepaid")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPawnRepaid)
				if err := _Contracts.contract.UnpackLog(event, "PawnRepaid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePawnRepaid is a log parse operation binding the contract event 0x387b6c44a03a44af16fb6452ab8551059597dfe9a7287d1850fcfa5a81595c3d.
//
// Solidity: event PawnRepaid(address pawner, address lender, uint256 id)
func (_Contracts *ContractsFilterer) ParsePawnRepaid(log types.Log) (*ContractsPawnRepaid, error) {
	event := new(ContractsPawnRepaid)
	if err := _Contracts.contract.UnpackLog(event, "PawnRepaid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsWhiteListAddedIterator is returned from FilterWhiteListAdded and is used to iterate over the raw logs and unpacked data for WhiteListAdded events raised by the Contracts contract.
type ContractsWhiteListAddedIterator struct {
	Event *ContractsWhiteListAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsWhiteListAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsWhiteListAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsWhiteListAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsWhiteListAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsWhiteListAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsWhiteListAdded represents a WhiteListAdded event raised by the Contracts contract.
type ContractsWhiteListAdded struct {
	SmartContract common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterWhiteListAdded is a free log retrieval operation binding the contract event 0xbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d291.
//
// Solidity: event WhiteListAdded(address smartContract)
func (_Contracts *ContractsFilterer) FilterWhiteListAdded(opts *bind.FilterOpts) (*ContractsWhiteListAddedIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "WhiteListAdded")
	if err != nil {
		return nil, err
	}
	return &ContractsWhiteListAddedIterator{contract: _Contracts.contract, event: "WhiteListAdded", logs: logs, sub: sub}, nil
}

// WatchWhiteListAdded is a free log subscription operation binding the contract event 0xbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d291.
//
// Solidity: event WhiteListAdded(address smartContract)
func (_Contracts *ContractsFilterer) WatchWhiteListAdded(opts *bind.WatchOpts, sink chan<- *ContractsWhiteListAdded) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "WhiteListAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsWhiteListAdded)
				if err := _Contracts.contract.UnpackLog(event, "WhiteListAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhiteListAdded is a log parse operation binding the contract event 0xbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d291.
//
// Solidity: event WhiteListAdded(address smartContract)
func (_Contracts *ContractsFilterer) ParseWhiteListAdded(log types.Log) (*ContractsWhiteListAdded, error) {
	event := new(ContractsWhiteListAdded)
	if err := _Contracts.contract.UnpackLog(event, "WhiteListAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsWhiteListRemovedIterator is returned from FilterWhiteListRemoved and is used to iterate over the raw logs and unpacked data for WhiteListRemoved events raised by the Contracts contract.
type ContractsWhiteListRemovedIterator struct {
	Event *ContractsWhiteListRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsWhiteListRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsWhiteListRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsWhiteListRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsWhiteListRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsWhiteListRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsWhiteListRemoved represents a WhiteListRemoved event raised by the Contracts contract.
type ContractsWhiteListRemoved struct {
	SmartContract common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterWhiteListRemoved is a free log retrieval operation binding the contract event 0xdb0d54f6e7ff4a52bdc49b4c8d9ff245f409fee25c2c0a0a72ece14e2ddf4cfc.
//
// Solidity: event WhiteListRemoved(address smartContract)
func (_Contracts *ContractsFilterer) FilterWhiteListRemoved(opts *bind.FilterOpts) (*ContractsWhiteListRemovedIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "WhiteListRemoved")
	if err != nil {
		return nil, err
	}
	return &ContractsWhiteListRemovedIterator{contract: _Contracts.contract, event: "WhiteListRemoved", logs: logs, sub: sub}, nil
}

// WatchWhiteListRemoved is a free log subscription operation binding the contract event 0xdb0d54f6e7ff4a52bdc49b4c8d9ff245f409fee25c2c0a0a72ece14e2ddf4cfc.
//
// Solidity: event WhiteListRemoved(address smartContract)
func (_Contracts *ContractsFilterer) WatchWhiteListRemoved(opts *bind.WatchOpts, sink chan<- *ContractsWhiteListRemoved) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "WhiteListRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsWhiteListRemoved)
				if err := _Contracts.contract.UnpackLog(event, "WhiteListRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhiteListRemoved is a log parse operation binding the contract event 0xdb0d54f6e7ff4a52bdc49b4c8d9ff245f409fee25c2c0a0a72ece14e2ddf4cfc.
//
// Solidity: event WhiteListRemoved(address smartContract)
func (_Contracts *ContractsFilterer) ParseWhiteListRemoved(log types.Log) (*ContractsWhiteListRemoved, error) {
	event := new(ContractsWhiteListRemoved)
	if err := _Contracts.contract.UnpackLog(event, "WhiteListRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
