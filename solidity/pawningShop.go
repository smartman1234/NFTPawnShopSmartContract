// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PawningShopPawn is an auto generated low-level Go binding around an user-defined struct.
type PawningShopPawn struct {
	Creator         common.Address
	ContractAddress common.Address
	TokenId         *big.Int
	Status          uint8
}

// ContractsMetaData contains all meta data concerning the Contracts contract.
var ContractsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"BidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"PawnCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"PawnCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"PawnDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"PawnLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"PawnRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"WhiteListAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"WhiteListRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_bidToPawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInterestProRated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"original\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInterestProRated\",\"type\":\"bool\"}],\"name\":\"_calculateRepaidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"}],\"name\":\"_calculateRepayDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_pawnToBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_pawns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enumPawningShop.PawnStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalNumberOfBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalNumberOfPawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_whiteListNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"cancelPawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInterestProRated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createPawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPawnById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enumPawningShop.PawnStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structPawningShop.Pawn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"getRepaidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartContract\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pawnId\",\"type\":\"uint256\"}],\"name\":\"repaid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000600355600060045534801561001a57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613d868061006a6000396000f3fe6080604052600436106101405760003560e01c80636707927d116100b65780639703ef351161006f5780639703ef3514610490578063aff109a4146104b9578063b2131f7d146104f6578063b53c370114610521578063c398f41f1461054a578063d98dbf211461057557610140565b80636707927d146103525780638228c5791461038f57806386271db4146103cc5780638bfaf684146104095780638da5cb5b14610449578063901d65311461047457610140565b80632b1fd58a116101085780632b1fd58a146102555780633ce11def1461027e578063415f1240146102a757806347ee0394146102d05780635b093b05146102f95780635f93893b1461033657610140565b806301bf66481461014557806309a9d76c1461016e57806326d8600b146101995780632712b2e5146101d657806327706ae514610218575b600080fd5b34801561015157600080fd5b5061016c600480360381019061016791906125cc565b6105a0565b005b34801561017a57600080fd5b50610183610744565b6040516101909190612e42565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb9190612693565b6107d2565b6040516101cd9190612cb3565b60405180910390f35b3480156101e257600080fd5b506101fd60048036038101906101f89190612693565b610811565b60405161020f96959493929190612de1565b60405180910390f35b34801561022457600080fd5b5061023f600480360381019061023a9190612693565b61087a565b60405161024c91906131bf565b60405180910390f35b34801561026157600080fd5b5061027c60048036038101906102779190612693565b610967565b005b34801561028a57600080fd5b506102a560048036038101906102a09190612693565b610b8d565b005b3480156102b357600080fd5b506102ce60048036038101906102c99190612693565b610e2a565b005b3480156102dc57600080fd5b506102f760048036038101906102f291906125cc565b6110b5565b005b34801561030557600080fd5b50610320600480360381019061031b91906126c0565b6112ed565b60405161032d91906131bf565b60405180910390f35b610350600480360381019061034b9190612693565b61132a565b005b34801561035e57600080fd5b5061037960048036038101906103749190612693565b6116bd565b60405161038691906131a4565b60405180910390f35b34801561039b57600080fd5b506103b660048036038101906103b19190612693565b6117db565b6040516103c391906131bf565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee9190612693565b6117f3565b60405161040091906131bf565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b9190612693565b61180b565b6040516104409493929190612d9c565b60405180910390f35b34801561045557600080fd5b5061045e611888565b60405161046b9190612cb3565b60405180910390f35b61048e60048036038101906104899190612700565b6118ac565b005b34801561049c57600080fd5b506104b760048036038101906104b29190612693565b611c89565b005b3480156104c557600080fd5b506104e060048036038101906104db9190612767565b611f80565b6040516104ed91906131bf565b60405180910390f35b34801561050257600080fd5b5061050b612003565b60405161051891906131bf565b60405180910390f35b34801561052d57600080fd5b5061054860048036038101906105439190612626565b612009565b005b34801561055657600080fd5b5061055f61245a565b60405161056c91906131bf565b60405180910390f35b34801561058157600080fd5b5061058a612460565b60405161059791906131bf565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062590613124565b60405180910390fd5b60005b6001805490508110156106c8578173ffffffffffffffffffffffffffffffffffffffff1660018281548110610669576106686134e3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106b5576106c8565b80806106c0906133dc565b915050610631565b600181815481106106dc576106db6134e3565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557fdb0d54f6e7ff4a52bdc49b4c8d9ff245f409fee25c2c0a0a72ece14e2ddf4cfc826040516107389190612cb3565b60405180910390a15050565b606060018054806020026020016040519081016040528092919081815260200182805480156107c857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161077e575b5050505050905090565b600181815481106107e257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b60008082116108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b590613004565b60405180910390fd5b60006008600084815260200190815260200160002054905060008111610919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091090613184565b60405180910390fd5b600060066000838152602001908152602001600020905061095e81600101548260020154836003015484600401548560050160009054906101000a900460ff16611f80565b92505050919050565b600060066000838152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006007600085815260200190815260200160002054905060008111610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990612fa4565b60405180910390fd5b600060056000838152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa790612fc4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc86600101549081150290604051600060405180830381858888f19350505050158015610afa573d6000803e3d6000fd5b5060028260030160006101000a81548160ff02191690836004811115610b2357610b226134b4565b5b0217905550856008600085815260200190815260200160002081905550428560030181905550857fc94b51939529c736abed465cef9c3c3cacd78ac7ee0855a967ef32f07935abec828686604051610b7d93929190612cce565b60405180910390a2505050505050565b600060056000838152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006004811115610be157610be06134b4565b5b8260030160009054906101000a900460ff166004811115610c0557610c046134b4565b5b14610c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3c906130a4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caa90612ec4565b60405180910390fd5b6000600860008581526020019081526020016000205414610d09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0090612fe4565b60405180910390fd5b60018260030160006101000a81548160ff02191690836004811115610d3157610d306134b4565b5b02179055508160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308385600201546040518463ffffffff1660e01b8152600401610d9b93929190612d65565b600060405180830381600087803b158015610db557600080fd5b505af1158015610dc9573d6000803e3d6000fd5b50505050827f6d2c0a066258c4b768dc98e6e9ce603e177a49c3b5ed4521b992fcddd16ccec460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610e1d9190612cb3565b60405180910390a2505050565b600060066000838152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecf90613084565b60405180910390fd5b81600101548260030154610eec9190613224565b4211610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f24906130e4565b60405180910390fd5b60006007600085815260200190815260200160002054905083600860008381526020019081526020016000205414610f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9190612f64565b60405180910390fd5b600060056000838152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308685600201546040518463ffffffff1660e01b815260040161103f93929190612d65565b600060405180830381600087803b15801561105957600080fd5b505af115801561106d573d6000803e3d6000fd5b50505050827f2bf4e95ec2b38d4f7dcd98fb46d610f1b4171ca40bb51d3fb758c73b5b0a70d88286896040516110a593929190612d65565b60405180910390a2505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a90613064565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111aa90612f04565b60405180910390fd5b60005b60018054905081101561124e578173ffffffffffffffffffffffffffffffffffffffff16600182815481106111ee576111ed6134e3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561123b57506112ea565b8080611246906133dc565b9150506111b6565b6001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d291826040516112e09190612cb3565b60405180910390a1505b50565b600080611306620151808461246690919063ffffffff16565b9050600061131d828661247c90919063ffffffff16565b9050809250505092915050565b600060056000838152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cf90613164565b60405180910390fd5b6000600860008581526020019081526020016000205490506000811415611434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142b90613024565b60405180910390fd5b6000600660008381526020019081526020016000209050600061145f826003015483600401546112ed565b9050804211156114a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149b90612f24565b60405180910390fd5b600034905060006114d984600101548560020154866003015487600401548860050160009054906101000a900460ff16611f80565b905080821461151d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151490612f84565b60405180910390fd5b8660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd308960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a600201546040518463ffffffff1660e01b81526004016115a693929190612d65565b600060405180830381600087803b1580156115c057600080fd5b505af11580156115d4573d6000803e3d6000fd5b5050505060008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611647573d6000803e3d6000fd5b50600860008a8152602001908152602001600020600090556007600087815260200190815260200160002060009055887f94cf9761720b3cb3b37c7dc2a067a535dd41ba9d6f504ab387f36d2912304ed68883896040516116aa93929190612d2e565b60405180910390a2505050505050505050565b6116c56124fd565b600560008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff1660048111156117be576117bd6134b4565b5b60048111156117d0576117cf6134b4565b5b815250509050919050565b60076020528060005260406000206000915090505481565b60086020528060005260406000206000915090505481565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16905084565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001600460008282546118bf9190613224565b9250508190555060003390506000349050600060056000858152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008511611953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194a906130c4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415806119e05750600073ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b611a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1690612ea4565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8590613104565b60405180910390fd5b60006004811115611aa257611aa16134b4565b5b8260030160009054906101000a900460ff166004811115611ac657611ac56134b4565b5b14611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd90612ee4565b60405180910390fd5b60008311611b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4090613144565b60405180910390fd5b8360066000600454815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260066000600454815260200190815260200160002060010181905550876006600060045481526020019081526020016000206002018190555086600660006004548152602001908152602001600020600401819055508560066000600454815260200190815260200160002060050160006101000a81548160ff02191690831515021790555084600760006004548152602001908152602001600020819055506004547ff844ec9dabd7bd88d75bc0f6668731f14e03c7263851488fc7884a3bf27899a6828688604051611c7793929190612d65565b60405180910390a25050505050505050565b6000600660008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581525050905060008160000151905060003390508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db790612e84565b60405180910390fd5b60006007600086815260200190815260200160002054905060006005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508560086000848152602001908152602001600020541415611e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6090613044565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166108fc86602001519081150290604051600060405180830381858888f19350505050158015611eb3573d6000803e3d6000fd5b5060066000878152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905560048201600090556005820160006101000a81549060ff021916905550506007600087815260200190815260200160002060009055857fca8f09216f6e7531ea442beda758df0ada53d3664eddd67413876bf215170410828685604051611f7093929190612d2e565b60405180910390a2505050505050565b6000808590508215611fe4576000611fa1858861249290919063ffffffff16565b90506000611fb887426124a890919063ffffffff16565b90506000611fc982620151806124be565b9050611fde838261246690919063ffffffff16565b93505050505b611ff7818861247c90919063ffffffff16565b91505095945050505050565b60025481565b60016003600082825461201c9190613224565b925050819055506000805b6001805490508110156120be5760018181548110612048576120476134e3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156120ab57600191505b80806120b6906133dc565b915050612027565b506000339050600115158215151461210b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210290612f44565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1663081812fc866040518263ffffffff1660e01b815260040161215d91906131bf565b60206040518083038186803b15801561217557600080fd5b505afa158015612189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ad91906125f9565b73ffffffffffffffffffffffffffffffffffffffff1614905060008573ffffffffffffffffffffffffffffffffffffffff1663e985e9c584306040518363ffffffff1660e01b8152600401612203929190612d05565b60206040518083038186803b15801561221b57600080fd5b505afa15801561222f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122539190612666565b9050818061225e5750805b61229d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229490612e64565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016122da93929190612d65565b600060405180830381600087803b1580156122f457600080fd5b505af1158015612308573d6000803e3d6000fd5b505050508260056000600354815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560056000600354815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460056000600354815260200190815260200160002060020181905550600060056000600354815260200190815260200160002060030160006101000a81548160ff02191690836004811115612413576124126134b4565b5b02179055506003547fd10594784457563b8564c078bb5c8bcc5e6b8e1b08b2d7ef7af261e84e366c1f8460405161244a9190612cb3565b60405180910390a2505050505050565b60045481565b60035481565b6000818361247491906132ab565b905092915050565b6000818361248a9190613224565b905092915050565b600081836124a0919061327a565b905092915050565b600081836124b69190613305565b905092915050565b60008082846124cd9190613425565b146124d95760016124dc565b60005b60ff1682846124eb919061327a565b6124f59190613224565b905092915050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000600481111561255d5761255c6134b4565b5b81525090565b60008135905061257281613d0b565b92915050565b60008151905061258781613d0b565b92915050565b60008135905061259c81613d22565b92915050565b6000815190506125b181613d22565b92915050565b6000813590506125c681613d39565b92915050565b6000602082840312156125e2576125e1613512565b5b60006125f084828501612563565b91505092915050565b60006020828403121561260f5761260e613512565b5b600061261d84828501612578565b91505092915050565b6000806040838503121561263d5761263c613512565b5b600061264b85828601612563565b925050602061265c858286016125b7565b9150509250929050565b60006020828403121561267c5761267b613512565b5b600061268a848285016125a2565b91505092915050565b6000602082840312156126a9576126a8613512565b5b60006126b7848285016125b7565b91505092915050565b600080604083850312156126d7576126d6613512565b5b60006126e5858286016125b7565b92505060206126f6858286016125b7565b9150509250929050565b6000806000806080858703121561271a57612719613512565b5b6000612728878288016125b7565b9450506020612739878288016125b7565b935050604061274a8782880161258d565b925050606061275b878288016125b7565b91505092959194509250565b600080600080600060a0868803121561278357612782613512565b5b6000612791888289016125b7565b95505060206127a2888289016125b7565b94505060406127b3888289016125b7565b93505060606127c4888289016125b7565b92505060806127d58882890161258d565b9150509295509295909350565b60006127ee8383612809565b60208301905092915050565b61280381613394565b82525050565b61281281613339565b82525050565b61282181613339565b82525050565b6000612832826131ea565b61283c8185613202565b9350612847836131da565b8060005b8381101561287857815161285f88826127e2565b975061286a836131f5565b92505060018101905061284b565b5085935050505092915050565b61288e8161334b565b82525050565b61289d816133a6565b82525050565b6128ac816133a6565b82525050565b60006128bf602f83613213565b91506128ca82613517565b604082019050919050565b60006128e2602c83613213565b91506128ed82613566565b604082019050919050565b6000612905602083613213565b9150612910826135b5565b602082019050919050565b6000612928603183613213565b9150612933826135de565b604082019050919050565b600061294b602183613213565b91506129568261362d565b604082019050919050565b600061296e603c83613213565b91506129798261367c565b604082019050919050565b6000612991601e83613213565b915061299c826136cb565b602082019050919050565b60006129b4603083613213565b91506129bf826136f4565b604082019050919050565b60006129d7603183613213565b91506129e282613743565b604082019050919050565b60006129fa602683613213565b9150612a0582613792565b604082019050919050565b6000612a1d602483613213565b9150612a28826137e1565b604082019050919050565b6000612a40603083613213565b9150612a4b82613830565b604082019050919050565b6000612a63603483613213565b9150612a6e8261387f565b604082019050919050565b6000612a86602383613213565b9150612a91826138ce565b604082019050919050565b6000612aa9603383613213565b9150612ab48261391d565b604082019050919050565b6000612acc603083613213565b9150612ad78261396c565b604082019050919050565b6000612aef603583613213565b9150612afa826139bb565b604082019050919050565b6000612b12603483613213565b9150612b1d82613a0a565b604082019050919050565b6000612b35603a83613213565b9150612b4082613a59565b604082019050919050565b6000612b58602183613213565b9150612b6382613aa8565b604082019050919050565b6000612b7b602883613213565b9150612b8682613af7565b604082019050919050565b6000612b9e603283613213565b9150612ba982613b46565b604082019050919050565b6000612bc1603a83613213565b9150612bcc82613b95565b604082019050919050565b6000612be4603283613213565b9150612bef82613be4565b604082019050919050565b6000612c07602b83613213565b9150612c1282613c33565b604082019050919050565b6000612c2a604183613213565b9150612c3582613c82565b606082019050919050565b608082016000820151612c566000850182612809565b506020820151612c696020850182612809565b506040820151612c7c6040850182612c95565b506060820151612c8f6060850182612894565b50505050565b612c9e8161338a565b82525050565b612cad8161338a565b82525050565b6000602082019050612cc86000830184612818565b92915050565b6000606082019050612ce360008301866127fa565b612cf06020830185612818565b612cfd6040830184612ca4565b949350505050565b6000604082019050612d1a6000830185612818565b612d276020830184612818565b9392505050565b6000606082019050612d436000830186612818565b612d5060208301856127fa565b612d5d6040830184612ca4565b949350505050565b6000606082019050612d7a6000830186612818565b612d876020830185612818565b612d946040830184612ca4565b949350505050565b6000608082019050612db16000830187612818565b612dbe6020830186612818565b612dcb6040830185612ca4565b612dd860608301846128a3565b95945050505050565b600060c082019050612df66000830189612818565b612e036020830188612ca4565b612e106040830187612ca4565b612e1d6060830186612ca4565b612e2a6080830185612ca4565b612e3760a0830184612885565b979650505050505050565b60006020820190508181036000830152612e5c8184612827565b905092915050565b60006020820190508181036000830152612e7d816128b2565b9050919050565b60006020820190508181036000830152612e9d816128d5565b9050919050565b60006020820190508181036000830152612ebd816128f8565b9050919050565b60006020820190508181036000830152612edd8161291b565b9050919050565b60006020820190508181036000830152612efd8161293e565b9050919050565b60006020820190508181036000830152612f1d81612961565b9050919050565b60006020820190508181036000830152612f3d81612984565b9050919050565b60006020820190508181036000830152612f5d816129a7565b9050919050565b60006020820190508181036000830152612f7d816129ca565b9050919050565b60006020820190508181036000830152612f9d816129ed565b9050919050565b60006020820190508181036000830152612fbd81612a10565b9050919050565b60006020820190508181036000830152612fdd81612a33565b9050919050565b60006020820190508181036000830152612ffd81612a56565b9050919050565b6000602082019050818103600083015261301d81612a79565b9050919050565b6000602082019050818103600083015261303d81612a9c565b9050919050565b6000602082019050818103600083015261305d81612abf565b9050919050565b6000602082019050818103600083015261307d81612ae2565b9050919050565b6000602082019050818103600083015261309d81612b05565b9050919050565b600060208201905081810360008301526130bd81612b28565b9050919050565b600060208201905081810360008301526130dd81612b4b565b9050919050565b600060208201905081810360008301526130fd81612b6e565b9050919050565b6000602082019050818103600083015261311d81612b91565b9050919050565b6000602082019050818103600083015261313d81612bb4565b9050919050565b6000602082019050818103600083015261315d81612bd7565b9050919050565b6000602082019050818103600083015261317d81612bfa565b9050919050565b6000602082019050818103600083015261319d81612c1d565b9050919050565b60006080820190506131b96000830184612c40565b92915050565b60006020820190506131d46000830184612ca4565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061322f8261338a565b915061323a8361338a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561326f5761326e613456565b5b828201905092915050565b60006132858261338a565b91506132908361338a565b9250826132a05761329f613485565b5b828204905092915050565b60006132b68261338a565b91506132c18361338a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132fa576132f9613456565b5b828202905092915050565b60006133108261338a565b915061331b8361338a565b92508282101561332e5761332d613456565b5b828203905092915050565b60006133448261336a565b9050919050565b60008115159050919050565b600081905061336582613cf7565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061339f826133b8565b9050919050565b60006133b182613357565b9050919050565b60006133c3826133ca565b9050919050565b60006133d58261336a565b9050919050565b60006133e78261338a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561341a57613419613456565b5b600182019050919050565b60006134308261338a565b915061343b8361338a565b92508261344b5761344a613485565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f5061776e696e6753686f703a20686176656e277420676f74207065726d69737360008201527f696f6e20746f207472616e736665720000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a206f6e6c792063726561746f722063616e20636160008201527f6e63656c20746865206269640000000000000000000000000000000000000000602082015250565b7f5061776e696e6773686f703a207061776e206973206e6f742065786973746564600082015250565b7f5061776e696e6753686f703a204f6e6c79206f776e6572206f6620746865207060008201527f61776e2063616e2063616e63656c206974000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a2063616e6e6f742062696420746869732070617760008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a20736d61727420636f6e7472616374206164647260008201527f657373206d75737420626520646966666572656e742077697468203000000000602082015250565b7f5061776e696e6753686f703a20746f206c61746520746f207265706169640000600082015250565b7f5061776e696e6753686f703a20736d61727420636f6e7472616374206973206e60008201527f6f7420696e207768697465206c69737400000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a207468697320626964206973206e6f742061636360008201527f657074656420627920626f72726f776572000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a207061792065786163746c79207265706169642060008201527f616d6f756e740000000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a20546865207061776e206973206e6f742065786960008201527f7374656400000000000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a206f6e6c792063726561746f72206f662070617760008201527f6e2063616e206163636570742062696400000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c792063616e2063616e63656c2077686560008201527f6e206e6f20626964206973206163636570746564000000000000000000000000602082015250565b7f5061776e696e6753686f703a207061776e206964206973206e6f74206578697360008201527f7465640000000000000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a2054686973207061776e20646f656e277420686160008201527f766520616e792061636365707465642062696400000000000000000000000000602082015250565b7f5061776e696e6753686f703a20796f757220626964206973206163636570746560008201527f642c2063616e6e6f742063616e63656c00000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c79206f776e65722063616e206164642060008201527f6164647265737320746f207768697465206c6973740000000000000000000000602082015250565b7f5061776e696e6753686f703a206f6e6c792063726561746f72206f662062696460008201527f2063616e206c697175696461746520746f6b656e000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c792063616e2063616e63656c2077686560008201527f6e2069742068617320737461747573206f662043524541544544000000000000602082015250565b7f5061776e696e6753686f703a207061776e206964206973206e6f742076616c6960008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204e6f742076616c69642074696d6520746f206c60008201527f6971756964617465000000000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a2063726561746f72206f6620746865207061776e60008201527f2063616e6e6f74206d616b652061206269640000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c79206f776e65722063616e2072656d6f60008201527f766520616464726573732066726f6d207768697465206c697374000000000000602082015250565b7f5061776e696e6753686f703a20616d6f756e74206f66206d6f6e6579206d757360008201527f7420626520626967676572207468616e20300000000000000000000000000000602082015250565b7f5061776e696e6753686f703a204f6e6c792063726561746f72206f662070617760008201527f6e2063616e207265706179000000000000000000000000000000000000000000602082015250565b7f5061776e696e6753686f703a207061776e20646f65736e27742068617665206160008201527f20616363657074656420626964206f7220746865207061776e20697320646f6e60208201527f6500000000000000000000000000000000000000000000000000000000000000604082015250565b60058110613d0857613d076134b4565b5b50565b613d1481613339565b8114613d1f57600080fd5b50565b613d2b8161334b565b8114613d3657600080fd5b50565b613d428161338a565b8114613d4d57600080fd5b5056fea26469706673582212200cf4f0d2a4d42f6349d441151bdf37a9d8c9305dba29256243283b963b30df6a64736f6c63430008070033",
}

// ContractsABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractsMetaData.ABI instead.
var ContractsABI = ContractsMetaData.ABI

// ContractsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractsMetaData.Bin instead.
var ContractsBin = ContractsMetaData.Bin

// DeployContracts deploys a new Ethereum contract, binding an instance of Contracts to it.
func DeployContracts(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contracts, error) {
	parsed, err := ContractsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// BidToPawn is a free data retrieval call binding the contract method 0x8228c579.
//
// Solidity: function _bidToPawn(uint256 ) view returns(uint256)
func (_Contracts *ContractsCaller) BidToPawn(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_bidToPawn", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BidToPawn is a free data retrieval call binding the contract method 0x8228c579.
//
// Solidity: function _bidToPawn(uint256 ) view returns(uint256)
func (_Contracts *ContractsSession) BidToPawn(arg0 *big.Int) (*big.Int, error) {
	return _Contracts.Contract.BidToPawn(&_Contracts.CallOpts, arg0)
}

// BidToPawn is a free data retrieval call binding the contract method 0x8228c579.
//
// Solidity: function _bidToPawn(uint256 ) view returns(uint256)
func (_Contracts *ContractsCallerSession) BidToPawn(arg0 *big.Int) (*big.Int, error) {
	return _Contracts.Contract.BidToPawn(&_Contracts.CallOpts, arg0)
}

// Bids is a free data retrieval call binding the contract method 0x2712b2e5.
//
// Solidity: function _bids(uint256 ) view returns(address creator, uint256 loanAmount, uint256 interest, uint256 loanStartTime, uint256 loanDuration, bool isInterestProRated)
func (_Contracts *ContractsCaller) Bids(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Creator            common.Address
	LoanAmount         *big.Int
	Interest           *big.Int
	LoanStartTime      *big.Int
	LoanDuration       *big.Int
	IsInterestProRated bool
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_bids", arg0)

	outstruct := new(struct {
		Creator            common.Address
		LoanAmount         *big.Int
		Interest           *big.Int
		LoanStartTime      *big.Int
		LoanDuration       *big.Int
		IsInterestProRated bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Creator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.LoanAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Interest = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.LoanStartTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.LoanDuration = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.IsInterestProRated = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// Bids is a free data retrieval call binding the contract method 0x2712b2e5.
//
// Solidity: function _bids(uint256 ) view returns(address creator, uint256 loanAmount, uint256 interest, uint256 loanStartTime, uint256 loanDuration, bool isInterestProRated)
func (_Contracts *ContractsSession) Bids(arg0 *big.Int) (struct {
	Creator            common.Address
	LoanAmount         *big.Int
	Interest           *big.Int
	LoanStartTime      *big.Int
	LoanDuration       *big.Int
	IsInterestProRated bool
}, error) {
	return _Contracts.Contract.Bids(&_Contracts.CallOpts, arg0)
}

// Bids is a free data retrieval call binding the contract method 0x2712b2e5.
//
// Solidity: function _bids(uint256 ) view returns(address creator, uint256 loanAmount, uint256 interest, uint256 loanStartTime, uint256 loanDuration, bool isInterestProRated)
func (_Contracts *ContractsCallerSession) Bids(arg0 *big.Int) (struct {
	Creator            common.Address
	LoanAmount         *big.Int
	Interest           *big.Int
	LoanStartTime      *big.Int
	LoanDuration       *big.Int
	IsInterestProRated bool
}, error) {
	return _Contracts.Contract.Bids(&_Contracts.CallOpts, arg0)
}

// CalculateRepaidAmount is a free data retrieval call binding the contract method 0xaff109a4.
//
// Solidity: function _calculateRepaidAmount(uint256 original, uint256 interest, uint256 loanStartTime, uint256 duration, bool isInterestProRated) view returns(uint256)
func (_Contracts *ContractsCaller) CalculateRepaidAmount(opts *bind.CallOpts, original *big.Int, interest *big.Int, loanStartTime *big.Int, duration *big.Int, isInterestProRated bool) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_calculateRepaidAmount", original, interest, loanStartTime, duration, isInterestProRated)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateRepaidAmount is a free data retrieval call binding the contract method 0xaff109a4.
//
// Solidity: function _calculateRepaidAmount(uint256 original, uint256 interest, uint256 loanStartTime, uint256 duration, bool isInterestProRated) view returns(uint256)
func (_Contracts *ContractsSession) CalculateRepaidAmount(original *big.Int, interest *big.Int, loanStartTime *big.Int, duration *big.Int, isInterestProRated bool) (*big.Int, error) {
	return _Contracts.Contract.CalculateRepaidAmount(&_Contracts.CallOpts, original, interest, loanStartTime, duration, isInterestProRated)
}

// CalculateRepaidAmount is a free data retrieval call binding the contract method 0xaff109a4.
//
// Solidity: function _calculateRepaidAmount(uint256 original, uint256 interest, uint256 loanStartTime, uint256 duration, bool isInterestProRated) view returns(uint256)
func (_Contracts *ContractsCallerSession) CalculateRepaidAmount(original *big.Int, interest *big.Int, loanStartTime *big.Int, duration *big.Int, isInterestProRated bool) (*big.Int, error) {
	return _Contracts.Contract.CalculateRepaidAmount(&_Contracts.CallOpts, original, interest, loanStartTime, duration, isInterestProRated)
}

// CalculateRepayDeadline is a free data retrieval call binding the contract method 0x5b093b05.
//
// Solidity: function _calculateRepayDeadline(uint256 loanStartTime, uint256 loanDuration) pure returns(uint256)
func (_Contracts *ContractsCaller) CalculateRepayDeadline(opts *bind.CallOpts, loanStartTime *big.Int, loanDuration *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_calculateRepayDeadline", loanStartTime, loanDuration)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateRepayDeadline is a free data retrieval call binding the contract method 0x5b093b05.
//
// Solidity: function _calculateRepayDeadline(uint256 loanStartTime, uint256 loanDuration) pure returns(uint256)
func (_Contracts *ContractsSession) CalculateRepayDeadline(loanStartTime *big.Int, loanDuration *big.Int) (*big.Int, error) {
	return _Contracts.Contract.CalculateRepayDeadline(&_Contracts.CallOpts, loanStartTime, loanDuration)
}

// CalculateRepayDeadline is a free data retrieval call binding the contract method 0x5b093b05.
//
// Solidity: function _calculateRepayDeadline(uint256 loanStartTime, uint256 loanDuration) pure returns(uint256)
func (_Contracts *ContractsCallerSession) CalculateRepayDeadline(loanStartTime *big.Int, loanDuration *big.Int) (*big.Int, error) {
	return _Contracts.Contract.CalculateRepayDeadline(&_Contracts.CallOpts, loanStartTime, loanDuration)
}

// FeeRate is a free data retrieval call binding the contract method 0xb2131f7d.
//
// Solidity: function _feeRate() view returns(uint256)
func (_Contracts *ContractsCaller) FeeRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_feeRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeRate is a free data retrieval call binding the contract method 0xb2131f7d.
//
// Solidity: function _feeRate() view returns(uint256)
func (_Contracts *ContractsSession) FeeRate() (*big.Int, error) {
	return _Contracts.Contract.FeeRate(&_Contracts.CallOpts)
}

// FeeRate is a free data retrieval call binding the contract method 0xb2131f7d.
//
// Solidity: function _feeRate() view returns(uint256)
func (_Contracts *ContractsCallerSession) FeeRate() (*big.Int, error) {
	return _Contracts.Contract.FeeRate(&_Contracts.CallOpts)
}

// PawnToBid is a free data retrieval call binding the contract method 0x86271db4.
//
// Solidity: function _pawnToBid(uint256 ) view returns(uint256)
func (_Contracts *ContractsCaller) PawnToBid(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_pawnToBid", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PawnToBid is a free data retrieval call binding the contract method 0x86271db4.
//
// Solidity: function _pawnToBid(uint256 ) view returns(uint256)
func (_Contracts *ContractsSession) PawnToBid(arg0 *big.Int) (*big.Int, error) {
	return _Contracts.Contract.PawnToBid(&_Contracts.CallOpts, arg0)
}

// PawnToBid is a free data retrieval call binding the contract method 0x86271db4.
//
// Solidity: function _pawnToBid(uint256 ) view returns(uint256)
func (_Contracts *ContractsCallerSession) PawnToBid(arg0 *big.Int) (*big.Int, error) {
	return _Contracts.Contract.PawnToBid(&_Contracts.CallOpts, arg0)
}

// Pawns is a free data retrieval call binding the contract method 0x8bfaf684.
//
// Solidity: function _pawns(uint256 ) view returns(address creator, address contractAddress, uint256 tokenId, uint8 status)
func (_Contracts *ContractsCaller) Pawns(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Creator         common.Address
	ContractAddress common.Address
	TokenId         *big.Int
	Status          uint8
}, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_pawns", arg0)

	outstruct := new(struct {
		Creator         common.Address
		ContractAddress common.Address
		TokenId         *big.Int
		Status          uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Creator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.ContractAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.TokenId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// Pawns is a free data retrieval call binding the contract method 0x8bfaf684.
//
// Solidity: function _pawns(uint256 ) view returns(address creator, address contractAddress, uint256 tokenId, uint8 status)
func (_Contracts *ContractsSession) Pawns(arg0 *big.Int) (struct {
	Creator         common.Address
	ContractAddress common.Address
	TokenId         *big.Int
	Status          uint8
}, error) {
	return _Contracts.Contract.Pawns(&_Contracts.CallOpts, arg0)
}

// Pawns is a free data retrieval call binding the contract method 0x8bfaf684.
//
// Solidity: function _pawns(uint256 ) view returns(address creator, address contractAddress, uint256 tokenId, uint8 status)
func (_Contracts *ContractsCallerSession) Pawns(arg0 *big.Int) (struct {
	Creator         common.Address
	ContractAddress common.Address
	TokenId         *big.Int
	Status          uint8
}, error) {
	return _Contracts.Contract.Pawns(&_Contracts.CallOpts, arg0)
}

// TotalNumberOfBid is a free data retrieval call binding the contract method 0xc398f41f.
//
// Solidity: function _totalNumberOfBid() view returns(uint256)
func (_Contracts *ContractsCaller) TotalNumberOfBid(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_totalNumberOfBid")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalNumberOfBid is a free data retrieval call binding the contract method 0xc398f41f.
//
// Solidity: function _totalNumberOfBid() view returns(uint256)
func (_Contracts *ContractsSession) TotalNumberOfBid() (*big.Int, error) {
	return _Contracts.Contract.TotalNumberOfBid(&_Contracts.CallOpts)
}

// TotalNumberOfBid is a free data retrieval call binding the contract method 0xc398f41f.
//
// Solidity: function _totalNumberOfBid() view returns(uint256)
func (_Contracts *ContractsCallerSession) TotalNumberOfBid() (*big.Int, error) {
	return _Contracts.Contract.TotalNumberOfBid(&_Contracts.CallOpts)
}

// TotalNumberOfPawn is a free data retrieval call binding the contract method 0xd98dbf21.
//
// Solidity: function _totalNumberOfPawn() view returns(uint256)
func (_Contracts *ContractsCaller) TotalNumberOfPawn(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_totalNumberOfPawn")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalNumberOfPawn is a free data retrieval call binding the contract method 0xd98dbf21.
//
// Solidity: function _totalNumberOfPawn() view returns(uint256)
func (_Contracts *ContractsSession) TotalNumberOfPawn() (*big.Int, error) {
	return _Contracts.Contract.TotalNumberOfPawn(&_Contracts.CallOpts)
}

// TotalNumberOfPawn is a free data retrieval call binding the contract method 0xd98dbf21.
//
// Solidity: function _totalNumberOfPawn() view returns(uint256)
func (_Contracts *ContractsCallerSession) TotalNumberOfPawn() (*big.Int, error) {
	return _Contracts.Contract.TotalNumberOfPawn(&_Contracts.CallOpts)
}

// WhiteListNFT is a free data retrieval call binding the contract method 0x26d8600b.
//
// Solidity: function _whiteListNFT(uint256 ) view returns(address)
func (_Contracts *ContractsCaller) WhiteListNFT(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "_whiteListNFT", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WhiteListNFT is a free data retrieval call binding the contract method 0x26d8600b.
//
// Solidity: function _whiteListNFT(uint256 ) view returns(address)
func (_Contracts *ContractsSession) WhiteListNFT(arg0 *big.Int) (common.Address, error) {
	return _Contracts.Contract.WhiteListNFT(&_Contracts.CallOpts, arg0)
}

// WhiteListNFT is a free data retrieval call binding the contract method 0x26d8600b.
//
// Solidity: function _whiteListNFT(uint256 ) view returns(address)
func (_Contracts *ContractsCallerSession) WhiteListNFT(arg0 *big.Int) (common.Address, error) {
	return _Contracts.Contract.WhiteListNFT(&_Contracts.CallOpts, arg0)
}

// GetPawnById is a free data retrieval call binding the contract method 0x6707927d.
//
// Solidity: function getPawnById(uint256 id) view returns((address,address,uint256,uint8))
func (_Contracts *ContractsCaller) GetPawnById(opts *bind.CallOpts, id *big.Int) (PawningShopPawn, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getPawnById", id)

	if err != nil {
		return *new(PawningShopPawn), err
	}

	out0 := *abi.ConvertType(out[0], new(PawningShopPawn)).(*PawningShopPawn)

	return out0, err

}

// GetPawnById is a free data retrieval call binding the contract method 0x6707927d.
//
// Solidity: function getPawnById(uint256 id) view returns((address,address,uint256,uint8))
func (_Contracts *ContractsSession) GetPawnById(id *big.Int) (PawningShopPawn, error) {
	return _Contracts.Contract.GetPawnById(&_Contracts.CallOpts, id)
}

// GetPawnById is a free data retrieval call binding the contract method 0x6707927d.
//
// Solidity: function getPawnById(uint256 id) view returns((address,address,uint256,uint8))
func (_Contracts *ContractsCallerSession) GetPawnById(id *big.Int) (PawningShopPawn, error) {
	return _Contracts.Contract.GetPawnById(&_Contracts.CallOpts, id)
}

// GetRepaidAmount is a free data retrieval call binding the contract method 0x27706ae5.
//
// Solidity: function getRepaidAmount(uint256 pawnId) view returns(uint256)
func (_Contracts *ContractsCaller) GetRepaidAmount(opts *bind.CallOpts, pawnId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getRepaidAmount", pawnId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRepaidAmount is a free data retrieval call binding the contract method 0x27706ae5.
//
// Solidity: function getRepaidAmount(uint256 pawnId) view returns(uint256)
func (_Contracts *ContractsSession) GetRepaidAmount(pawnId *big.Int) (*big.Int, error) {
	return _Contracts.Contract.GetRepaidAmount(&_Contracts.CallOpts, pawnId)
}

// GetRepaidAmount is a free data retrieval call binding the contract method 0x27706ae5.
//
// Solidity: function getRepaidAmount(uint256 pawnId) view returns(uint256)
func (_Contracts *ContractsCallerSession) GetRepaidAmount(pawnId *big.Int) (*big.Int, error) {
	return _Contracts.Contract.GetRepaidAmount(&_Contracts.CallOpts, pawnId)
}

// GetWhiteList is a free data retrieval call binding the contract method 0x09a9d76c.
//
// Solidity: function getWhiteList() view returns(address[])
func (_Contracts *ContractsCaller) GetWhiteList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "getWhiteList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetWhiteList is a free data retrieval call binding the contract method 0x09a9d76c.
//
// Solidity: function getWhiteList() view returns(address[])
func (_Contracts *ContractsSession) GetWhiteList() ([]common.Address, error) {
	return _Contracts.Contract.GetWhiteList(&_Contracts.CallOpts)
}

// GetWhiteList is a free data retrieval call binding the contract method 0x09a9d76c.
//
// Solidity: function getWhiteList() view returns(address[])
func (_Contracts *ContractsCallerSession) GetWhiteList() ([]common.Address, error) {
	return _Contracts.Contract.GetWhiteList(&_Contracts.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contracts *ContractsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contracts.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contracts *ContractsSession) Owner() (common.Address, error) {
	return _Contracts.Contract.Owner(&_Contracts.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contracts *ContractsCallerSession) Owner() (common.Address, error) {
	return _Contracts.Contract.Owner(&_Contracts.CallOpts)
}

// AcceptBid is a paid mutator transaction binding the contract method 0x2b1fd58a.
//
// Solidity: function acceptBid(uint256 bidId) returns()
func (_Contracts *ContractsTransactor) AcceptBid(opts *bind.TransactOpts, bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "acceptBid", bidId)
}

// AcceptBid is a paid mutator transaction binding the contract method 0x2b1fd58a.
//
// Solidity: function acceptBid(uint256 bidId) returns()
func (_Contracts *ContractsSession) AcceptBid(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AcceptBid(&_Contracts.TransactOpts, bidId)
}

// AcceptBid is a paid mutator transaction binding the contract method 0x2b1fd58a.
//
// Solidity: function acceptBid(uint256 bidId) returns()
func (_Contracts *ContractsTransactorSession) AcceptBid(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.AcceptBid(&_Contracts.TransactOpts, bidId)
}

// AddToWhiteList is a paid mutator transaction binding the contract method 0x47ee0394.
//
// Solidity: function addToWhiteList(address smartContract) returns()
func (_Contracts *ContractsTransactor) AddToWhiteList(opts *bind.TransactOpts, smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "addToWhiteList", smartContract)
}

// AddToWhiteList is a paid mutator transaction binding the contract method 0x47ee0394.
//
// Solidity: function addToWhiteList(address smartContract) returns()
func (_Contracts *ContractsSession) AddToWhiteList(smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.AddToWhiteList(&_Contracts.TransactOpts, smartContract)
}

// AddToWhiteList is a paid mutator transaction binding the contract method 0x47ee0394.
//
// Solidity: function addToWhiteList(address smartContract) returns()
func (_Contracts *ContractsTransactorSession) AddToWhiteList(smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.AddToWhiteList(&_Contracts.TransactOpts, smartContract)
}

// CancelBid is a paid mutator transaction binding the contract method 0x9703ef35.
//
// Solidity: function cancelBid(uint256 bidId) returns()
func (_Contracts *ContractsTransactor) CancelBid(opts *bind.TransactOpts, bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "cancelBid", bidId)
}

// CancelBid is a paid mutator transaction binding the contract method 0x9703ef35.
//
// Solidity: function cancelBid(uint256 bidId) returns()
func (_Contracts *ContractsSession) CancelBid(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CancelBid(&_Contracts.TransactOpts, bidId)
}

// CancelBid is a paid mutator transaction binding the contract method 0x9703ef35.
//
// Solidity: function cancelBid(uint256 bidId) returns()
func (_Contracts *ContractsTransactorSession) CancelBid(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CancelBid(&_Contracts.TransactOpts, bidId)
}

// CancelPawn is a paid mutator transaction binding the contract method 0x3ce11def.
//
// Solidity: function cancelPawn(uint256 pawnId) returns()
func (_Contracts *ContractsTransactor) CancelPawn(opts *bind.TransactOpts, pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "cancelPawn", pawnId)
}

// CancelPawn is a paid mutator transaction binding the contract method 0x3ce11def.
//
// Solidity: function cancelPawn(uint256 pawnId) returns()
func (_Contracts *ContractsSession) CancelPawn(pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CancelPawn(&_Contracts.TransactOpts, pawnId)
}

// CancelPawn is a paid mutator transaction binding the contract method 0x3ce11def.
//
// Solidity: function cancelPawn(uint256 pawnId) returns()
func (_Contracts *ContractsTransactorSession) CancelPawn(pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CancelPawn(&_Contracts.TransactOpts, pawnId)
}

// CreateBid is a paid mutator transaction binding the contract method 0x901d6531.
//
// Solidity: function createBid(uint256 rate, uint256 duration, bool isInterestProRated, uint256 pawnId) payable returns()
func (_Contracts *ContractsTransactor) CreateBid(opts *bind.TransactOpts, rate *big.Int, duration *big.Int, isInterestProRated bool, pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "createBid", rate, duration, isInterestProRated, pawnId)
}

// CreateBid is a paid mutator transaction binding the contract method 0x901d6531.
//
// Solidity: function createBid(uint256 rate, uint256 duration, bool isInterestProRated, uint256 pawnId) payable returns()
func (_Contracts *ContractsSession) CreateBid(rate *big.Int, duration *big.Int, isInterestProRated bool, pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CreateBid(&_Contracts.TransactOpts, rate, duration, isInterestProRated, pawnId)
}

// CreateBid is a paid mutator transaction binding the contract method 0x901d6531.
//
// Solidity: function createBid(uint256 rate, uint256 duration, bool isInterestProRated, uint256 pawnId) payable returns()
func (_Contracts *ContractsTransactorSession) CreateBid(rate *big.Int, duration *big.Int, isInterestProRated bool, pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CreateBid(&_Contracts.TransactOpts, rate, duration, isInterestProRated, pawnId)
}

// CreatePawn is a paid mutator transaction binding the contract method 0xb53c3701.
//
// Solidity: function createPawn(address tokenAddress, uint256 tokenId) returns()
func (_Contracts *ContractsTransactor) CreatePawn(opts *bind.TransactOpts, tokenAddress common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "createPawn", tokenAddress, tokenId)
}

// CreatePawn is a paid mutator transaction binding the contract method 0xb53c3701.
//
// Solidity: function createPawn(address tokenAddress, uint256 tokenId) returns()
func (_Contracts *ContractsSession) CreatePawn(tokenAddress common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CreatePawn(&_Contracts.TransactOpts, tokenAddress, tokenId)
}

// CreatePawn is a paid mutator transaction binding the contract method 0xb53c3701.
//
// Solidity: function createPawn(address tokenAddress, uint256 tokenId) returns()
func (_Contracts *ContractsTransactorSession) CreatePawn(tokenAddress common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.CreatePawn(&_Contracts.TransactOpts, tokenAddress, tokenId)
}

// Liquidate is a paid mutator transaction binding the contract method 0x415f1240.
//
// Solidity: function liquidate(uint256 bidId) returns()
func (_Contracts *ContractsTransactor) Liquidate(opts *bind.TransactOpts, bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "liquidate", bidId)
}

// Liquidate is a paid mutator transaction binding the contract method 0x415f1240.
//
// Solidity: function liquidate(uint256 bidId) returns()
func (_Contracts *ContractsSession) Liquidate(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Liquidate(&_Contracts.TransactOpts, bidId)
}

// Liquidate is a paid mutator transaction binding the contract method 0x415f1240.
//
// Solidity: function liquidate(uint256 bidId) returns()
func (_Contracts *ContractsTransactorSession) Liquidate(bidId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Liquidate(&_Contracts.TransactOpts, bidId)
}

// RemoveFromWhiteList is a paid mutator transaction binding the contract method 0x01bf6648.
//
// Solidity: function removeFromWhiteList(address smartContract) returns()
func (_Contracts *ContractsTransactor) RemoveFromWhiteList(opts *bind.TransactOpts, smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "removeFromWhiteList", smartContract)
}

// RemoveFromWhiteList is a paid mutator transaction binding the contract method 0x01bf6648.
//
// Solidity: function removeFromWhiteList(address smartContract) returns()
func (_Contracts *ContractsSession) RemoveFromWhiteList(smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.RemoveFromWhiteList(&_Contracts.TransactOpts, smartContract)
}

// RemoveFromWhiteList is a paid mutator transaction binding the contract method 0x01bf6648.
//
// Solidity: function removeFromWhiteList(address smartContract) returns()
func (_Contracts *ContractsTransactorSession) RemoveFromWhiteList(smartContract common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.RemoveFromWhiteList(&_Contracts.TransactOpts, smartContract)
}

// Repaid is a paid mutator transaction binding the contract method 0x5f93893b.
//
// Solidity: function repaid(uint256 pawnId) payable returns()
func (_Contracts *ContractsTransactor) Repaid(opts *bind.TransactOpts, pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "repaid", pawnId)
}

// Repaid is a paid mutator transaction binding the contract method 0x5f93893b.
//
// Solidity: function repaid(uint256 pawnId) payable returns()
func (_Contracts *ContractsSession) Repaid(pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Repaid(&_Contracts.TransactOpts, pawnId)
}

// Repaid is a paid mutator transaction binding the contract method 0x5f93893b.
//
// Solidity: function repaid(uint256 pawnId) payable returns()
func (_Contracts *ContractsTransactorSession) Repaid(pawnId *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Repaid(&_Contracts.TransactOpts, pawnId)
}

// ContractsBidAcceptedIterator is returned from FilterBidAccepted and is used to iterate over the raw logs and unpacked data for BidAccepted events raised by the Contracts contract.
type ContractsBidAcceptedIterator struct {
	Event *ContractsBidAccepted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsBidAcceptedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsBidAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsBidAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsBidAcceptedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsBidAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsBidAccepted represents a BidAccepted event raised by the Contracts contract.
type ContractsBidAccepted struct {
	Borrower common.Address
	Lender   common.Address
	PawnId   *big.Int
	BidId    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBidAccepted is a free log retrieval operation binding the contract event 0xc94b51939529c736abed465cef9c3c3cacd78ac7ee0855a967ef32f07935abec.
//
// Solidity: event BidAccepted(address borrower, address lender, uint256 pawnId, uint256 indexed bidId)
func (_Contracts *ContractsFilterer) FilterBidAccepted(opts *bind.FilterOpts, bidId []*big.Int) (*ContractsBidAcceptedIterator, error) {

	var bidIdRule []interface{}
	for _, bidIdItem := range bidId {
		bidIdRule = append(bidIdRule, bidIdItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "BidAccepted", bidIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractsBidAcceptedIterator{contract: _Contracts.contract, event: "BidAccepted", logs: logs, sub: sub}, nil
}

// WatchBidAccepted is a free log subscription operation binding the contract event 0xc94b51939529c736abed465cef9c3c3cacd78ac7ee0855a967ef32f07935abec.
//
// Solidity: event BidAccepted(address borrower, address lender, uint256 pawnId, uint256 indexed bidId)
func (_Contracts *ContractsFilterer) WatchBidAccepted(opts *bind.WatchOpts, sink chan<- *ContractsBidAccepted, bidId []*big.Int) (event.Subscription, error) {

	var bidIdRule []interface{}
	for _, bidIdItem := range bidId {
		bidIdRule = append(bidIdRule, bidIdItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "BidAccepted", bidIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsBidAccepted)
				if err := _Contracts.contract.UnpackLog(event, "BidAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidAccepted is a log parse operation binding the contract event 0xc94b51939529c736abed465cef9c3c3cacd78ac7ee0855a967ef32f07935abec.
//
// Solidity: event BidAccepted(address borrower, address lender, uint256 pawnId, uint256 indexed bidId)
func (_Contracts *ContractsFilterer) ParseBidAccepted(log types.Log) (*ContractsBidAccepted, error) {
	event := new(ContractsBidAccepted)
	if err := _Contracts.contract.UnpackLog(event, "BidAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsBidCancelledIterator is returned from FilterBidCancelled and is used to iterate over the raw logs and unpacked data for BidCancelled events raised by the Contracts contract.
type ContractsBidCancelledIterator struct {
	Event *ContractsBidCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsBidCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsBidCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsBidCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsBidCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsBidCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsBidCancelled represents a BidCancelled event raised by the Contracts contract.
type ContractsBidCancelled struct {
	Borrower common.Address
	Lender   common.Address
	PawnId   *big.Int
	BidId    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBidCancelled is a free log retrieval operation binding the contract event 0xca8f09216f6e7531ea442beda758df0ada53d3664eddd67413876bf215170410.
//
// Solidity: event BidCancelled(address borrower, address lender, uint256 pawnId, uint256 indexed bidId)
func (_Contracts *ContractsFilterer) FilterBidCancelled(opts *bind.FilterOpts, bidId []*big.Int) (*ContractsBidCancelledIterator, error) {

	var bidIdRule []interface{}
	for _, bidIdItem := range bidId {
		bidIdRule = append(bidIdRule, bidIdItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "BidCancelled", bidIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractsBidCancelledIterator{contract: _Contracts.contract, event: "BidCancelled", logs: logs, sub: sub}, nil
}

// WatchBidCancelled is a free log subscription operation binding the contract event 0xca8f09216f6e7531ea442beda758df0ada53d3664eddd67413876bf215170410.
//
// Solidity: event BidCancelled(address borrower, address lender, uint256 pawnId, uint256 indexed bidId)
func (_Contracts *ContractsFilterer) WatchBidCancelled(opts *bind.WatchOpts, sink chan<- *ContractsBidCancelled, bidId []*big.Int) (event.Subscription, error) {

	var bidIdRule []interface{}
	for _, bidIdItem := range bidId {
		bidIdRule = append(bidIdRule, bidIdItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "BidCancelled", bidIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsBidCancelled)
				if err := _Contracts.contract.UnpackLog(event, "BidCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidCancelled is a log parse operation binding the contract event 0xca8f09216f6e7531ea442beda758df0ada53d3664eddd67413876bf215170410.
//
// Solidity: event BidCancelled(address borrower, address lender, uint256 pawnId, uint256 indexed bidId)
func (_Contracts *ContractsFilterer) ParseBidCancelled(log types.Log) (*ContractsBidCancelled, error) {
	event := new(ContractsBidCancelled)
	if err := _Contracts.contract.UnpackLog(event, "BidCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsBidCreatedIterator is returned from FilterBidCreated and is used to iterate over the raw logs and unpacked data for BidCreated events raised by the Contracts contract.
type ContractsBidCreatedIterator struct {
	Event *ContractsBidCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsBidCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsBidCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsBidCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsBidCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsBidCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsBidCreated represents a BidCreated event raised by the Contracts contract.
type ContractsBidCreated struct {
	Borrower common.Address
	Lender   common.Address
	PawnId   *big.Int
	BidId    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBidCreated is a free log retrieval operation binding the contract event 0xf844ec9dabd7bd88d75bc0f6668731f14e03c7263851488fc7884a3bf27899a6.
//
// Solidity: event BidCreated(address borrower, address lender, uint256 pawnId, uint256 indexed bidId)
func (_Contracts *ContractsFilterer) FilterBidCreated(opts *bind.FilterOpts, bidId []*big.Int) (*ContractsBidCreatedIterator, error) {

	var bidIdRule []interface{}
	for _, bidIdItem := range bidId {
		bidIdRule = append(bidIdRule, bidIdItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "BidCreated", bidIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractsBidCreatedIterator{contract: _Contracts.contract, event: "BidCreated", logs: logs, sub: sub}, nil
}

// WatchBidCreated is a free log subscription operation binding the contract event 0xf844ec9dabd7bd88d75bc0f6668731f14e03c7263851488fc7884a3bf27899a6.
//
// Solidity: event BidCreated(address borrower, address lender, uint256 pawnId, uint256 indexed bidId)
func (_Contracts *ContractsFilterer) WatchBidCreated(opts *bind.WatchOpts, sink chan<- *ContractsBidCreated, bidId []*big.Int) (event.Subscription, error) {

	var bidIdRule []interface{}
	for _, bidIdItem := range bidId {
		bidIdRule = append(bidIdRule, bidIdItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "BidCreated", bidIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsBidCreated)
				if err := _Contracts.contract.UnpackLog(event, "BidCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidCreated is a log parse operation binding the contract event 0xf844ec9dabd7bd88d75bc0f6668731f14e03c7263851488fc7884a3bf27899a6.
//
// Solidity: event BidCreated(address borrower, address lender, uint256 pawnId, uint256 indexed bidId)
func (_Contracts *ContractsFilterer) ParseBidCreated(log types.Log) (*ContractsBidCreated, error) {
	event := new(ContractsBidCreated)
	if err := _Contracts.contract.UnpackLog(event, "BidCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPawnCancelledIterator is returned from FilterPawnCancelled and is used to iterate over the raw logs and unpacked data for PawnCancelled events raised by the Contracts contract.
type ContractsPawnCancelledIterator struct {
	Event *ContractsPawnCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPawnCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPawnCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPawnCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPawnCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPawnCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPawnCancelled represents a PawnCancelled event raised by the Contracts contract.
type ContractsPawnCancelled struct {
	Borrower common.Address
	PawnId   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterPawnCancelled is a free log retrieval operation binding the contract event 0x6d2c0a066258c4b768dc98e6e9ce603e177a49c3b5ed4521b992fcddd16ccec4.
//
// Solidity: event PawnCancelled(address borrower, uint256 indexed pawnId)
func (_Contracts *ContractsFilterer) FilterPawnCancelled(opts *bind.FilterOpts, pawnId []*big.Int) (*ContractsPawnCancelledIterator, error) {

	var pawnIdRule []interface{}
	for _, pawnIdItem := range pawnId {
		pawnIdRule = append(pawnIdRule, pawnIdItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PawnCancelled", pawnIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractsPawnCancelledIterator{contract: _Contracts.contract, event: "PawnCancelled", logs: logs, sub: sub}, nil
}

// WatchPawnCancelled is a free log subscription operation binding the contract event 0x6d2c0a066258c4b768dc98e6e9ce603e177a49c3b5ed4521b992fcddd16ccec4.
//
// Solidity: event PawnCancelled(address borrower, uint256 indexed pawnId)
func (_Contracts *ContractsFilterer) WatchPawnCancelled(opts *bind.WatchOpts, sink chan<- *ContractsPawnCancelled, pawnId []*big.Int) (event.Subscription, error) {

	var pawnIdRule []interface{}
	for _, pawnIdItem := range pawnId {
		pawnIdRule = append(pawnIdRule, pawnIdItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PawnCancelled", pawnIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPawnCancelled)
				if err := _Contracts.contract.UnpackLog(event, "PawnCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePawnCancelled is a log parse operation binding the contract event 0x6d2c0a066258c4b768dc98e6e9ce603e177a49c3b5ed4521b992fcddd16ccec4.
//
// Solidity: event PawnCancelled(address borrower, uint256 indexed pawnId)
func (_Contracts *ContractsFilterer) ParsePawnCancelled(log types.Log) (*ContractsPawnCancelled, error) {
	event := new(ContractsPawnCancelled)
	if err := _Contracts.contract.UnpackLog(event, "PawnCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPawnCreatedIterator is returned from FilterPawnCreated and is used to iterate over the raw logs and unpacked data for PawnCreated events raised by the Contracts contract.
type ContractsPawnCreatedIterator struct {
	Event *ContractsPawnCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPawnCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPawnCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPawnCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPawnCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPawnCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPawnCreated represents a PawnCreated event raised by the Contracts contract.
type ContractsPawnCreated struct {
	Borrower common.Address
	PawnId   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterPawnCreated is a free log retrieval operation binding the contract event 0xd10594784457563b8564c078bb5c8bcc5e6b8e1b08b2d7ef7af261e84e366c1f.
//
// Solidity: event PawnCreated(address borrower, uint256 indexed pawnId)
func (_Contracts *ContractsFilterer) FilterPawnCreated(opts *bind.FilterOpts, pawnId []*big.Int) (*ContractsPawnCreatedIterator, error) {

	var pawnIdRule []interface{}
	for _, pawnIdItem := range pawnId {
		pawnIdRule = append(pawnIdRule, pawnIdItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PawnCreated", pawnIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractsPawnCreatedIterator{contract: _Contracts.contract, event: "PawnCreated", logs: logs, sub: sub}, nil
}

// WatchPawnCreated is a free log subscription operation binding the contract event 0xd10594784457563b8564c078bb5c8bcc5e6b8e1b08b2d7ef7af261e84e366c1f.
//
// Solidity: event PawnCreated(address borrower, uint256 indexed pawnId)
func (_Contracts *ContractsFilterer) WatchPawnCreated(opts *bind.WatchOpts, sink chan<- *ContractsPawnCreated, pawnId []*big.Int) (event.Subscription, error) {

	var pawnIdRule []interface{}
	for _, pawnIdItem := range pawnId {
		pawnIdRule = append(pawnIdRule, pawnIdItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PawnCreated", pawnIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPawnCreated)
				if err := _Contracts.contract.UnpackLog(event, "PawnCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePawnCreated is a log parse operation binding the contract event 0xd10594784457563b8564c078bb5c8bcc5e6b8e1b08b2d7ef7af261e84e366c1f.
//
// Solidity: event PawnCreated(address borrower, uint256 indexed pawnId)
func (_Contracts *ContractsFilterer) ParsePawnCreated(log types.Log) (*ContractsPawnCreated, error) {
	event := new(ContractsPawnCreated)
	if err := _Contracts.contract.UnpackLog(event, "PawnCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPawnDealIterator is returned from FilterPawnDeal and is used to iterate over the raw logs and unpacked data for PawnDeal events raised by the Contracts contract.
type ContractsPawnDealIterator struct {
	Event *ContractsPawnDeal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPawnDealIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPawnDeal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPawnDeal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPawnDealIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPawnDealIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPawnDeal represents a PawnDeal event raised by the Contracts contract.
type ContractsPawnDeal struct {
	Borrower common.Address
	Lender   common.Address
	PawnId   *big.Int
	BidId    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterPawnDeal is a free log retrieval operation binding the contract event 0x565c25eb662704636cfae21248242a16ab4040da39c543d3db1fe26b8a4dbb0e.
//
// Solidity: event PawnDeal(address borrower, address lender, uint256 indexed pawnId, uint256 bidId)
func (_Contracts *ContractsFilterer) FilterPawnDeal(opts *bind.FilterOpts, pawnId []*big.Int) (*ContractsPawnDealIterator, error) {

	var pawnIdRule []interface{}
	for _, pawnIdItem := range pawnId {
		pawnIdRule = append(pawnIdRule, pawnIdItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PawnDeal", pawnIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractsPawnDealIterator{contract: _Contracts.contract, event: "PawnDeal", logs: logs, sub: sub}, nil
}

// WatchPawnDeal is a free log subscription operation binding the contract event 0x565c25eb662704636cfae21248242a16ab4040da39c543d3db1fe26b8a4dbb0e.
//
// Solidity: event PawnDeal(address borrower, address lender, uint256 indexed pawnId, uint256 bidId)
func (_Contracts *ContractsFilterer) WatchPawnDeal(opts *bind.WatchOpts, sink chan<- *ContractsPawnDeal, pawnId []*big.Int) (event.Subscription, error) {

	var pawnIdRule []interface{}
	for _, pawnIdItem := range pawnId {
		pawnIdRule = append(pawnIdRule, pawnIdItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PawnDeal", pawnIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPawnDeal)
				if err := _Contracts.contract.UnpackLog(event, "PawnDeal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePawnDeal is a log parse operation binding the contract event 0x565c25eb662704636cfae21248242a16ab4040da39c543d3db1fe26b8a4dbb0e.
//
// Solidity: event PawnDeal(address borrower, address lender, uint256 indexed pawnId, uint256 bidId)
func (_Contracts *ContractsFilterer) ParsePawnDeal(log types.Log) (*ContractsPawnDeal, error) {
	event := new(ContractsPawnDeal)
	if err := _Contracts.contract.UnpackLog(event, "PawnDeal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPawnLiquidatedIterator is returned from FilterPawnLiquidated and is used to iterate over the raw logs and unpacked data for PawnLiquidated events raised by the Contracts contract.
type ContractsPawnLiquidatedIterator struct {
	Event *ContractsPawnLiquidated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPawnLiquidatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPawnLiquidated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPawnLiquidated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPawnLiquidatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPawnLiquidatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPawnLiquidated represents a PawnLiquidated event raised by the Contracts contract.
type ContractsPawnLiquidated struct {
	Borrower common.Address
	Lender   common.Address
	PawnId   *big.Int
	BidId    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterPawnLiquidated is a free log retrieval operation binding the contract event 0x2bf4e95ec2b38d4f7dcd98fb46d610f1b4171ca40bb51d3fb758c73b5b0a70d8.
//
// Solidity: event PawnLiquidated(address borrower, address lender, uint256 indexed pawnId, uint256 bidId)
func (_Contracts *ContractsFilterer) FilterPawnLiquidated(opts *bind.FilterOpts, pawnId []*big.Int) (*ContractsPawnLiquidatedIterator, error) {

	var pawnIdRule []interface{}
	for _, pawnIdItem := range pawnId {
		pawnIdRule = append(pawnIdRule, pawnIdItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PawnLiquidated", pawnIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractsPawnLiquidatedIterator{contract: _Contracts.contract, event: "PawnLiquidated", logs: logs, sub: sub}, nil
}

// WatchPawnLiquidated is a free log subscription operation binding the contract event 0x2bf4e95ec2b38d4f7dcd98fb46d610f1b4171ca40bb51d3fb758c73b5b0a70d8.
//
// Solidity: event PawnLiquidated(address borrower, address lender, uint256 indexed pawnId, uint256 bidId)
func (_Contracts *ContractsFilterer) WatchPawnLiquidated(opts *bind.WatchOpts, sink chan<- *ContractsPawnLiquidated, pawnId []*big.Int) (event.Subscription, error) {

	var pawnIdRule []interface{}
	for _, pawnIdItem := range pawnId {
		pawnIdRule = append(pawnIdRule, pawnIdItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PawnLiquidated", pawnIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPawnLiquidated)
				if err := _Contracts.contract.UnpackLog(event, "PawnLiquidated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePawnLiquidated is a log parse operation binding the contract event 0x2bf4e95ec2b38d4f7dcd98fb46d610f1b4171ca40bb51d3fb758c73b5b0a70d8.
//
// Solidity: event PawnLiquidated(address borrower, address lender, uint256 indexed pawnId, uint256 bidId)
func (_Contracts *ContractsFilterer) ParsePawnLiquidated(log types.Log) (*ContractsPawnLiquidated, error) {
	event := new(ContractsPawnLiquidated)
	if err := _Contracts.contract.UnpackLog(event, "PawnLiquidated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsPawnRepaidIterator is returned from FilterPawnRepaid and is used to iterate over the raw logs and unpacked data for PawnRepaid events raised by the Contracts contract.
type ContractsPawnRepaidIterator struct {
	Event *ContractsPawnRepaid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsPawnRepaidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsPawnRepaid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsPawnRepaid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsPawnRepaidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsPawnRepaidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsPawnRepaid represents a PawnRepaid event raised by the Contracts contract.
type ContractsPawnRepaid struct {
	Borrower common.Address
	Lender   common.Address
	PawnId   *big.Int
	BidId    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterPawnRepaid is a free log retrieval operation binding the contract event 0x94cf9761720b3cb3b37c7dc2a067a535dd41ba9d6f504ab387f36d2912304ed6.
//
// Solidity: event PawnRepaid(address borrower, address lender, uint256 indexed pawnId, uint256 bidId)
func (_Contracts *ContractsFilterer) FilterPawnRepaid(opts *bind.FilterOpts, pawnId []*big.Int) (*ContractsPawnRepaidIterator, error) {

	var pawnIdRule []interface{}
	for _, pawnIdItem := range pawnId {
		pawnIdRule = append(pawnIdRule, pawnIdItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "PawnRepaid", pawnIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractsPawnRepaidIterator{contract: _Contracts.contract, event: "PawnRepaid", logs: logs, sub: sub}, nil
}

// WatchPawnRepaid is a free log subscription operation binding the contract event 0x94cf9761720b3cb3b37c7dc2a067a535dd41ba9d6f504ab387f36d2912304ed6.
//
// Solidity: event PawnRepaid(address borrower, address lender, uint256 indexed pawnId, uint256 bidId)
func (_Contracts *ContractsFilterer) WatchPawnRepaid(opts *bind.WatchOpts, sink chan<- *ContractsPawnRepaid, pawnId []*big.Int) (event.Subscription, error) {

	var pawnIdRule []interface{}
	for _, pawnIdItem := range pawnId {
		pawnIdRule = append(pawnIdRule, pawnIdItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "PawnRepaid", pawnIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsPawnRepaid)
				if err := _Contracts.contract.UnpackLog(event, "PawnRepaid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePawnRepaid is a log parse operation binding the contract event 0x94cf9761720b3cb3b37c7dc2a067a535dd41ba9d6f504ab387f36d2912304ed6.
//
// Solidity: event PawnRepaid(address borrower, address lender, uint256 indexed pawnId, uint256 bidId)
func (_Contracts *ContractsFilterer) ParsePawnRepaid(log types.Log) (*ContractsPawnRepaid, error) {
	event := new(ContractsPawnRepaid)
	if err := _Contracts.contract.UnpackLog(event, "PawnRepaid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsWhiteListAddedIterator is returned from FilterWhiteListAdded and is used to iterate over the raw logs and unpacked data for WhiteListAdded events raised by the Contracts contract.
type ContractsWhiteListAddedIterator struct {
	Event *ContractsWhiteListAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsWhiteListAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsWhiteListAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsWhiteListAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsWhiteListAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsWhiteListAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsWhiteListAdded represents a WhiteListAdded event raised by the Contracts contract.
type ContractsWhiteListAdded struct {
	SmartContract common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterWhiteListAdded is a free log retrieval operation binding the contract event 0xbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d291.
//
// Solidity: event WhiteListAdded(address smartContract)
func (_Contracts *ContractsFilterer) FilterWhiteListAdded(opts *bind.FilterOpts) (*ContractsWhiteListAddedIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "WhiteListAdded")
	if err != nil {
		return nil, err
	}
	return &ContractsWhiteListAddedIterator{contract: _Contracts.contract, event: "WhiteListAdded", logs: logs, sub: sub}, nil
}

// WatchWhiteListAdded is a free log subscription operation binding the contract event 0xbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d291.
//
// Solidity: event WhiteListAdded(address smartContract)
func (_Contracts *ContractsFilterer) WatchWhiteListAdded(opts *bind.WatchOpts, sink chan<- *ContractsWhiteListAdded) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "WhiteListAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsWhiteListAdded)
				if err := _Contracts.contract.UnpackLog(event, "WhiteListAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhiteListAdded is a log parse operation binding the contract event 0xbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d291.
//
// Solidity: event WhiteListAdded(address smartContract)
func (_Contracts *ContractsFilterer) ParseWhiteListAdded(log types.Log) (*ContractsWhiteListAdded, error) {
	event := new(ContractsWhiteListAdded)
	if err := _Contracts.contract.UnpackLog(event, "WhiteListAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractsWhiteListRemovedIterator is returned from FilterWhiteListRemoved and is used to iterate over the raw logs and unpacked data for WhiteListRemoved events raised by the Contracts contract.
type ContractsWhiteListRemovedIterator struct {
	Event *ContractsWhiteListRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsWhiteListRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsWhiteListRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsWhiteListRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsWhiteListRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsWhiteListRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsWhiteListRemoved represents a WhiteListRemoved event raised by the Contracts contract.
type ContractsWhiteListRemoved struct {
	SmartContract common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterWhiteListRemoved is a free log retrieval operation binding the contract event 0xdb0d54f6e7ff4a52bdc49b4c8d9ff245f409fee25c2c0a0a72ece14e2ddf4cfc.
//
// Solidity: event WhiteListRemoved(address smartContract)
func (_Contracts *ContractsFilterer) FilterWhiteListRemoved(opts *bind.FilterOpts) (*ContractsWhiteListRemovedIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "WhiteListRemoved")
	if err != nil {
		return nil, err
	}
	return &ContractsWhiteListRemovedIterator{contract: _Contracts.contract, event: "WhiteListRemoved", logs: logs, sub: sub}, nil
}

// WatchWhiteListRemoved is a free log subscription operation binding the contract event 0xdb0d54f6e7ff4a52bdc49b4c8d9ff245f409fee25c2c0a0a72ece14e2ddf4cfc.
//
// Solidity: event WhiteListRemoved(address smartContract)
func (_Contracts *ContractsFilterer) WatchWhiteListRemoved(opts *bind.WatchOpts, sink chan<- *ContractsWhiteListRemoved) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "WhiteListRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsWhiteListRemoved)
				if err := _Contracts.contract.UnpackLog(event, "WhiteListRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhiteListRemoved is a log parse operation binding the contract event 0xdb0d54f6e7ff4a52bdc49b4c8d9ff245f409fee25c2c0a0a72ece14e2ddf4cfc.
//
// Solidity: event WhiteListRemoved(address smartContract)
func (_Contracts *ContractsFilterer) ParseWhiteListRemoved(log types.Log) (*ContractsWhiteListRemoved, error) {
	event := new(ContractsWhiteListRemoved)
	if err := _Contracts.contract.UnpackLog(event, "WhiteListRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
